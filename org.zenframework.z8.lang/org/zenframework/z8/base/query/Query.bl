import org.zenframework.z8.base.simple.Runnable;
import org.zenframework.z8.base.form.Control;
import org.zenframework.z8.base.table.value.Field;
import org.zenframework.z8.base.table.value.Link;

[native "org.zenframework.z8.server.base.query.Query"]
class Query extends Runnable {
	protected bool readOnly = false;
	public bool visible = true;
	public bool collapseGroups = false;
	public bool showTotals = false;

	public int columns = 3;
	public decimal width = 0.0;
	public decimal height = 0.0;

	public Control[] formFields;
	public Field[] gridFields;
	public Field[] nameFields;      // Поля для идентификации записи в UI, например, в навигаторе формы или заголовке

	public Field[] sortFields;
	public Field[] groupFields;     // Соответствует пункту 'Группировать по полю' в меню колонки таблицы.
									// Не путать с groupBy - выбираемые данные не группируются.

	public Field[] searchFields;
	public Field searchId;

	public Link[] aggregateBy;      // Поля из корневого запроса для группировки его перед выполнением основного.
	public Field[] groupBy;         // Поля для группировки выбираемых данных.

	public Command[] commands;

	public Period period;

	virtual protected void onRender();
	virtual protected Style renderRecord();

	virtual protected void onCommand(Command command, guid[] recordIds);

	virtual protected void onCopy();

	virtual protected void onNew(guid recordId, guid parentId);

	virtual protected void beforeRead(guid parentId);
	virtual protected void afterRead(guid parentId);

	virtual protected void beforeCreate(guid recordId, guid parentId);
	virtual protected void afterCreate(guid recordId, guid parentId);

	virtual protected void beforeUpdate(guid recordId);
	virtual protected void afterUpdate(guid recordId);

	virtual protected void beforeDestroy(guid recordId);
	virtual protected void afterDestroy(guid recordId);

	public bool hasRecord(guid recordId);
	public bool hasRecord(sql_bool where);

	public guid[] findRecords(sql_bool where);

	public Field getFieldById(string id);
	public Field getFieldByName(string name);

	public int count();
	public int count(sql_bool where);

	public bool aggregate();
	public bool aggregate(sql_bool where);
	public bool aggregate(Field[] fields);
	public bool aggregate(Field[] fields, sql_bool where);

	public guid create();
	public guid create(guid recordId);
	public guid copy(guid recordId);

	public void read();
	public void read(sql_bool where);

	public void read(Field[] fields);
	public void read(Field[] fields, sql_bool where);
	public void read(Field[] fields, Field[] sortFields);
	public void read(Field[] fields, Field[] sortFields, sql_bool where);

	public bool readFirst();
	public bool readFirst(sql_bool where);

	public bool readFirst(Field[] fields);
	public bool readFirst(Field[] fields, sql_bool where);
	public bool readFirst(Field[] fields, Field[] sortFields);
	public bool readFirst(Field[] fields, Field[] sortFields, sql_bool where);

	public bool readRecord(guid id);
	public bool readRecord(guid id, Field[] fields);

	public void sort(Field[] sortFields);
	public void sort(Field[] sortFields, sql_bool where);
	public void sort(Field[] sortFields, Field[] fields);
	public void sort(Field[] sortFields, Field[] fields, sql_bool where);

	public void group(Field[] groupFields);
	public void group(Field[] groupFields, sql_bool where);
	public void group(Field[] groupFields, Field[] fields);
	public void group(Field[] groupFields, Field[] fields, sql_bool where);
	public void group(Field[] groupFields, Field[] fields, sql_bool where, sql_bool having);
	public void group(Field[] groupFields, Field[] fields, Field[] sortFields);
	public void group(Field[] groupFields, Field[] fields, Field[] sortFields, sql_bool where);
	public void group(Field[] groupFields, Field[] fields, Field[] sortFields, sql_bool where, sql_bool having);

	public bool next();
	public guid recordId();

	public int update(guid id);
	public int update(sql_bool where);

	public int destroy(guid id);
	public int destroy(sql_bool where);

	virtual protected sql_bool where();
	virtual protected sql_bool having();

	public void addWhere(sql_bool where);
	public void addWhere(string where);         // [{ property: "p", [operator: "o",] value: "v" }] или { property: "p", value: "v" }
	public void addWhere(string[] where);       // { property: "p", value: "v" }

	public void setWhere(sql_bool where);
	public void setWhere(string where);
	public void setWhere(string[] where);

	auto protected Query[] queries;
	auto public Field[] dataFields;

	virtual protected string getRecordFullText(guid recordId);
}
