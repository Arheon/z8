
package org.zenframework.z8.compiler.parser.grammar;

//import org.zenframework.z8.compiler.core.ILanguageElement;
import org.zenframework.z8.compiler.core.IPosition;
import org.zenframework.z8.compiler.core.IToken;
import org.zenframework.z8.compiler.parser.grammar.lexer.Lexer;
import org.zenframework.z8.compiler.parser.grammar.lexer.token.Token;

public class Grammar
{
int WHITESPACE = 257;
int LINEBREAK = 258;
int COMMENT = 259;
int NOT = 260;
int MUL = 261;
int DIV = 262;
int MOD = 263;
int ADD = 264;
int SUB = 265;
int EQU = 266;
int NOT_EQU = 267;
int LESS = 268;
int MORE = 269;
int LESS_EQU = 270;
int MORE_EQU = 271;
int AND = 272;
int OR = 273;
int GROUP = 274;
int ADD_ASSIGN = 275;
int SUB_ASSIGN = 276;
int MUL_ASSIGN = 277;
int DIV_ASSIGN = 278;
int MOD_ASSIGN = 279;
int LBRACE = 280;
int RBRACE = 281;
int LBRACKET = 282;
int RBRACKET = 283;
int LCBRACE = 284;
int RCBRACE = 285;
int BRACKETS = 286;
int COLON = 287;
int SEMICOLON = 288;
int ASSIGN = 289;
int QUESTION = 290;
int COMMA = 291;
int ELVIS = 292;
int DOT = 293;
int CONSTANT = 294;
int IDENTIFIER = 295;
int OPERATOR = 296;
int IF = 297;
int ELSE = 298;
int DO = 299;
int FOR = 300;
int WHILE = 301;
int BREAK = 302;
int RETURN = 303;
int CONTINUE = 304;
int THIS = 305;
int SUPER = 306;
int CONTAINER = 307;
int NULL = 308;
int IMPORT = 309;
int CLASS = 310;
int PUBLIC = 311;
int PROTECTED = 312;
int PRIVATE = 313;
int EXTENDS = 314;
int ENUM = 315;
int RECORDS = 316;
int AUTO = 317;
int NEW = 318;
int STATIC = 319;
int TRY = 320;
int CATCH = 321;
int FINALLY = 322;
int THROW = 323;
int VIRTUAL = 324;
int FINAL = 325;
int INSTANCE_OF = 326;
int YYERRCODE = 256;

int yyexca[] = {
  -1, 1,
  0, -1,
  -2, 0,
  -1, 71,
  295, 94,
  296, 94,
  -2, 104,
  -1, 236,
  295, 96,
  -2, 249,
  -1, 237,
  295, 97,
  -2, 250,
  0,
};

int YYNPROD = 273;
int YYLAST = 1261;
int yyact[] = {
     105,     265,      70,     104,     159,      30,     113,     291,
     263,      53,     142,     119,     103,      35,     308,     213,
     325,     326,      35,      76,      48,       9,      35,     225,
     394,     234,     235,     233,     108,      35,     389,     403,
     148,     149,      24,      26,      25,      35,      84,      80,
      28,     296,      27,      78,     224,      79,     232,      29,
      78,     221,     267,     197,      78,     215,     192,     210,
     117,      54,      30,      80,     153,      52,      80,      80,
      50,      79,     116,      80,      79,      79,      56,      35,
      76,      79,     187,     151,     147,     191,     191,      80,
     138,     403,     156,      65,     349,      79,     403,      24,
      26,      25,      56,      56,      77,      28,      55,      27,
     133,     418,     138,      56,      29,      78,      30,      65,
     299,     183,      65,      65,     182,     180,      66,     129,
     138,     368,     399,      35,      76,     181,     367,     369,
     412,     411,     136,      56,      80,     371,     139,     406,
      80,     138,      79,      24,      26,      25,      79,     372,
     135,      28,     387,      27,      56,     366,     237,     162,
      29,      78,     386,     377,     236,     374,      30,     365,
     373,      80,     223,     266,     238,     142,     142,      79,
     160,     140,     161,     245,     347,     341,     269,     340,
     129,      30,     196,     195,     129,     222,     345,      81,
     194,     193,      57,      24,      26,      25,     186,      39,
     123,      28,     225,      27,     146,      43,     305,     158,
      29,     213,     141,     157,       9,      22,      24,      26,
      25,     138,      21,     422,      28,     419,      27,     415,
     414,     409,     237,      29,      23,     299,     375,     237,
     236,     153,     163,     170,     171,     236,     223,     166,
     167,     168,     169,     223,      89,     336,     316,      63,
     164,     165,     324,     237,     103,     343,     105,     170,
     171,     236,     240,     113,     301,     108,     242,     223,
     172,     173,     174,      68,     190,      93,     189,      83,
      69,     102,     106,     176,      35,     100,     101,     108,
     107,     307,      12,     311,     319,     375,     111,     112,
     115,     109,      16,      99,     209,     108,      91,      90,
      46,     142,     188,     116,     211,     314,     342,     218,
      44,     228,     344,     176,      35,     122,     225,     201,
     234,     235,     233,     230,     229,     231,     111,     112,
     115,      96,     391,     200,     214,     200,     200,     323,
     207,      12,     134,     116,     227,     232,     131,      16,
     221,     212,      78,     132,     331,     332,     333,     334,
     335,     226,     219,     138,     345,     220,     271,     272,
      36,     237,     330,      14,     233,      44,     180,     236,
     237,     209,     237,     389,      92,     223,     236,     141,
     236,      45,      63,      59,     223,     137,     223,     293,
     292,     393,     133,     234,     302,     214,      80,     395,
     266,     290,     185,     217,      79,     232,     138,     131,
      80,     398,     402,      97,     376,     160,      79,      68,
     152,      14,     216,     264,      72,      69,     392,      74,
     385,     404,     241,     329,     326,     265,      44,     388,
     336,     184,      44,     338,     237,      70,     291,       5,
     104,     412,     236,      32,     268,     244,     118,     239,
     223,     275,     179,      30,     237,       3,     144,     237,
      31,     223,     236,     145,     417,     236,     409,     223,
     223,     418,     420,     223,     213,     224,       6,      32,
       5,     343,     143,      33,     403,     161,     185,      22,
      24,      26,      25,      73,      21,       3,      28,     328,
      27,     273,      30,     410,      60,      29,      23,     416,
     124,      64,     419,     372,      58,     370,     215,      35,
       6,      37,      59,     421,     221,     422,     423,     210,
     330,     294,     346,      38,      30,     199,     303,      24,
      26,      25,     348,      10,     203,      28,     134,      27,
     179,      35,     309,     317,      29,      78,     322,     229,
     378,     380,     381,     382,     383,     384,     114,     274,
     295,      24,      26,      25,      15,      94,      44,      28,
      85,      27,      47,     315,      83,     339,      29,      78,
      51,      93,      41,      82,     327,     184,      42,     310,
     318,     203,     179,     304,      40,     396,      11,     293,
     330,      49,     400,      17,      19,     110,     282,     283,
     331,      18,     332,     333,     334,     335,     367,      34,
      20,     137,       4,     324,     405,       8,       7,       2,
       1,     185,     369,       0,     102,     407,     390,       0,
     100,     101,       0,     399,     413,     406,       0,       0,
      38,     313,     321,     222,      71,     240,     372,       0,
     108,       0,     214,     242,     186,      86,       0,     229,
     312,     320,     211,       0,       0,       0,     176,      35,
      71,     102,     218,      71,      71,     100,     101,       0,
      71,     111,     112,     115,      96,     152,      22,      92,
     214,       0,     379,       0,     155,     108,     116,       0,
     214,     142,     306,     237,      58,      23,       0,     323,
     212,      36,       0,     176,      35,       0,     225,       0,
     234,     235,     233,     230,     229,     231,     111,     112,
     115,      96,      67,       0,       0,       0,     171,      97,
     198,     294,       0,     116,     401,     232,       0,       0,
     221,      71,      78,     369,     102,      71,       0,       0,
     100,     101,     276,     277,       0,     214,       0,     202,
       0,     202,     202,     288,      61,     217,       0,     408,
     108,     399,     298,     214,     142,     208,     155,       0,
     201,     110,       0,     216,       0,     270,     176,      35,
       0,     225,       0,     234,     235,     233,     230,     229,
     231,     111,     112,     115,      96,     130,       0,     102,
       0,       0,     287,     100,     101,       0,     116,       0,
     232,     297,       0,     221,      62,      78,       0,       0,
       0,       0,       0,     108,       0,       0,       0,     142,
       0,       0,     121,     125,      18,       0,       0,       0,
       0,     176,      35,       0,     225,       0,     234,     235,
     233,     230,     229,     231,     111,     112,     115,      96,
     102,       0,       0,       0,     100,     101,     130,       0,
       0,     116,     130,     232,       0,      67,     221,       0,
      78,       0,     165,      94,     108,       0,       0,     187,
     204,     205,     120,     126,     390,       0,       0,       0,
     102,     114,     176,      35,     100,     101,      62,       0,
       0,       0,      61,       0,     180,     111,     112,     115,
      96,       0,       0,       0,     295,       0,       0,       0,
     186,     397,     116,      98,       0,     187,       0,       0,
     102,      78,     176,      35,     100,     101,       0,     365,
     150,       0,       0,       0,       0,     111,     112,     115,
      96,      95,     102,       0,     108,      62,     100,     101,
     186,       0,     116,      62,     337,     136,     198,       0,
       0,       0,     176,      35,     102,       0,     108,     300,
     100,     101,     186,       0,       0,     111,     112,     115,
      96,       0,       0,       0,     176,      35,       0,       0,
     295,       0,     116,       0,     186,     289,       0,     111,
     112,     115,      96,       0,     102,       0,     176,      35,
     100,     101,       0,     155,     116,       0,       0,       0,
       0,     111,     112,     115,      96,     155,     102,       0,
     108,       0,     100,     101,     186,       0,     116,       0,
     175,     177,     178,       0,       0,       0,     176,      35,
       0,       0,     108,     102,       0,     206,       0,     100,
     101,     111,     112,     115,      96,       0,       0,       0,
     176,      35,       0,       0,       0,       0,     116,     108,
       0,       0,      87,     111,     112,     115,      96,       0,
       0,       0,       0,       0,       0,      88,      35,     102,
     116,       0,       0,     100,     101,       0,       0,       0,
     111,     112,     115,      96,       0,     246,       0,       0,
     262,       0,     102,     108,       0,     116,     100,     101,
     284,     285,     286,     101,       0,     102,     172,       0,
      13,     176,      35,       0,       0,       0,     108,       0,
     278,     279,     280,     281,     111,     112,     115,      96,
       0,       0,       0,       0,     176,      35,       0,       0,
       0,     116,       0,       0,       0,       0,       0,     111,
     112,     115,       0,       0,       0,       0,       0,      66,
       0,       0,       0,       0,     116,     247,     248,     249,
     250,     251,     252,     253,     254,     255,     256,     257,
     258,     259,     260,      66,       0,       0,     123,     127,
       0,       0,       0,      61,       0,       0,       0,       0,
       0,       0,     261,     128,       0,       0,       0,     151,
     350,     351,     352,     353,     354,     355,     356,     357,
     358,     359,     360,     361,     362,     363,     364,     247,
       0,       0,       0,       0,       0,       0,       0,       0,
     173,     174,      98,       0,       0,       0,       0,       0,
       0,       0,      75,       0,       0,       0,       0,       0,
     167,     168,     169,      95,      62,       0,       0,       0,
     145,       0,       0,       0,       0,       0,      75,       0,
       0,      75,       0,       0,       0,       0,      75,       0,
       0,       0,     243,       0,       0,       0,       0,     128,
       0,       0,     154,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,     248,
     249,     250,     251,     252,     253,     254,     255,     256,
     257,     258,     259,     260,     261,     150,       0,      75,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,     123,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
     243,       0,       0,       0,      13,
};

int yypact[] = {
    -113,   -1000,     137,     137,    -288,   -1000,   -1000,   -1000,
   -1000,    -258,    -101,     -95,   -1000,     137,   -1000,    -294,
   -1000,    -231,    -234,   -1000,   -1000,   -1000,   -1000,    -301,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,    -238,     137,
   -1000,   -1000,    -194,   -1000,   -1000,    -107,    -224,   -1000,
   -1000,    -110,    -257,   -1000,   -1000,   -1000,   -1000,    -258,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,     687,   -1000,
    -239,   -1000,    -224,   -1000,   -1000,    -277,     176,   -1000,
   -1000,   -1000,    -224,   -1000,   -1000,   -1000,    -193,    -153,
    -127,     -96,    -217,    -263,    -220,   -1000,    -258,   -1000,
   -1000,   -1000,    -209,   -1000,   -1000,   -1000,    -223,   -1000,
     -88,     -92,    -322,    -130,     -54,   -1000,     -34,     -45,
   -1000,     -13,   -1000,   -1000,     742,     742,     742,    -184,
     -35,    -102,   -1000,    -219,     723,   -1000,    -202,   -1000,
   -1000,   -1000,   -1000,   -1000,    -241,   -1000,   -1000,   -1000,
    -111,    -112,   -1000,    -180,   -1000,    -117,    -118,     202,
    -244,   -1000,   -1000,   -1000,   -1000,     312,     -81,     312,
     312,   -1000,     666,   -1000,   -1000,     416,   -1000,   -1000,
    -129,    -132,   -1000,   -1000,     -63,     801,   -1000,     -63,
    -273,   -1000,    -245,    -170,    -257,   -1000,   -1000,    -258,
     723,     648,     723,     723,     723,     723,     742,     742,
     742,     742,     742,     742,     742,     742,     742,   -1000,
   -1000,   -1000,   -1000,     -81,    -258,    -184,   -1000,   -1000,
   -1000,     616,   -1000,    -266,     -68,   -1000,     598,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,    -101,   -1000,   -1000,   -1000,   -1000,     -93,
   -1000,     349,   -1000,   -1000,   -1000,    -274,      -3,   -1000,
   -1000,   -1000,   -1000,    -305,    -305,     723,   -1000,      49,
   -1000,    -252,   -1000,   -1000,   -1000,     580,    -121,    -123,
    -126,    -252,     467,    -106,   -1000,    -102,   -1000,    -132,
   -1000,    -124,   -1000,    -132,    -205,   -1000,   -1000,     -63,
     -63,     -63,     -63,     -63,     -63,     -63,     -63,     -63,
     -63,     -63,     -63,     -63,     -63,     -63,   -1000,   -1000,
    -140,   -1000,   -1000,   -1000,   -1000,   -1000,    -223,    -169,
   -1000,   -1000,     -54,   -1000,   -1000,   -1000,     -25,     -25,
     -25,     -25,     -13,     -13,   -1000,   -1000,   -1000,    -203,
   -1000,   -1000,    -172,   -1000,   -1000,   -1000,   -1000,     723,
   -1000,    -203,   -1000,   -1000,   -1000,    -156,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,    -136,    -139,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,     -66,    -126,   -1000,
   -1000,    -141,     648,     723,     723,     723,     723,     723,
     467,   -1000,    -142,    -150,   -1000,   -1000,   -1000,     467,
    -271,     516,   -1000,   -1000,   -1000,    -270,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,    -282,   -1000,     723,
   -1000,     548,    -177,   -1000,     648,   -1000,   -1000,    -282,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,    -267,   -1000,   -1000,   -1000,    -252,     723,    -161,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,     648,
   -1000,   -1000,     -72,     467,    -167,    -168,     723,     -73,
     -74,    -126,   -1000,   -1000,     723,    -191,   -1000,   -1000,
   -1000,     -76,     723,     467,     -78,   -1000,     467,   -1000,
};

int yypgo[] = {
       0,     568,     567,     421,     407,     566,     565,     562,
     438,     549,     560,     173,     548,     274,    1016,     547,
     545,     339,     542,     540,     534,     255,     531,     530,
     553,     528,     522,     520,     516,     266,     491,     336,
     485,     483,     473,     468,     692,      44,     740,     658,
     231,     251,     465,     256,     355,     460,     451,     442,
     427,     422,     415,     413,     246,     394,     242,       6,
       0,     314,    1091,       2,     391,     664,     388,     848,
      53,       1,     387,     384,     295,     370,     369,       7,
     360,     351,     345,      55,     308,     284,     321,      15,
     386,     371,     287,     333,     311,     234,     330,       3,
     329,     316,     306,     289,      12,     279,     278,     348,
     253,     517,     857,     379,     835,     275,     273,     264,
     258,     510,     357,     254,     252,     244,
};

int yyr1[] = {
       0,       1,       1,       1,       1,       3,       3,       4,
       4,       2,       7,       7,       8,      10,      10,      10,
      12,      12,      12,      12,      12,      12,      13,      13,
      14,      14,       9,       9,       9,      15,      16,      17,
      18,      18,       6,       6,      20,      21,      22,      22,
      22,      23,      23,      19,      19,      24,      24,      25,
      26,      27,      28,      29,      29,      30,      30,       5,
      32,      33,      34,      34,      31,      36,      36,      38,
      38,      40,      40,      42,      42,      44,      45,      45,
      45,      45,      45,      45,      45,      45,      45,      35,
      35,      46,      43,      48,      49,      49,      47,      51,
      52,      53,      53,      54,      50,      50,      55,      56,
      58,      58,      59,      59,      60,      60,      37,      37,
      39,      39,      39,      62,      62,      62,      62,      62,
      62,      62,      62,      62,      62,      62,      62,      62,
      62,      62,      62,      62,      62,      41,      41,      65,
      66,      66,      67,      63,      63,      61,      61,      61,
      69,      68,      68,      68,      70,      70,      71,      71,
      71,      72,      72,      73,      64,      64,      74,      74,
      76,      75,      75,      75,      75,      75,      75,      75,
      75,      75,      75,      75,      75,      75,      75,      75,
      75,      75,      75,      75,      75,      75,      78,      83,
      84,      85,      86,      86,      77,      77,      77,      80,
      80,      88,      89,      90,      90,      91,      91,      81,
      81,      81,      82,      82,      82,      82,      82,      79,
      79,      79,      79,      79,      79,      79,      79,      11,
      11,      93,      93,      93,      93,      94,      94,      95,
      95,      96,      96,      96,      97,      97,      97,      97,
      97,      97,      98,      98,      98,      99,      99,      99,
      99,     100,     100,     100,     100,     101,     101,     101,
     102,     103,     103,      87,      87,     104,     104,     104,
     104,     104,     104,     104,     106,     106,      57,      57,
      92,      92,      92,      92,      92,      92,      92,      92,
      92,     105,     108,     107,     107,     109,     109,     109,
     109,
};

int yyr2[] = {
       2,       0,       1,       1,       2,       1,       2,       1,
       1,       1,       1,       2,       3,       3,       4,       4,
       1,       1,       1,       1,       1,       1,       1,       1,
       1,       2,       1,       3,       2,       1,       1,       2,
       1,       2,       1,       2,       1,       1,       1,       3,
       2,       1,       2,       1,       2,       1,       2,       1,
       1,       1,       2,       1,       3,       1,       2,       2,
       2,       1,       1,       2,       2,       1,       2,       1,
       2,       1,       2,       1,       2,       1,       2,       2,
       3,       3,       3,       3,       2,       1,       1,       1,
       2,       1,       2,       1,       1,       2,       2,       1,
       3,       1,       2,       2,       1,       2,       1,       2,
       1,       1,       1,       2,       2,       3,       1,       3,
       1,       3,       3,       3,       2,       3,       4,       4,
       4,       4,       4,       4,       4,       4,       4,       4,
       4,       4,       4,       4,       4,       2,       2,       1,
       1,       3,       1,       2,       3,       1,       1,       1,
       1,       2,       3,       4,       1,       3,       1,       1,
       1,       5,       5,       1,       2,       3,       1,       2,
       1,       1,       1,       2,       2,       3,       3,       1,
       1,       1,       1,       2,       2,       2,       2,       2,
       2,       2,       2,       2,       2,       2,       3,       2,
       5,       2,       2,       2,       1,       2,       2,       3,
       5,       3,       5,       1,       1,       8,       9,       1,
       1,       1,       2,       3,       3,       2,       2,       1,
       3,       3,       3,       3,       3,       3,       3,       1,
       3,       1,       5,       3,       3,       1,       3,       1,
       3,       1,       3,       3,       1,       1,       3,       3,
       3,       3,       1,       3,       3,       1,       3,       3,
       3,       1,       2,       2,       2,       1,       2,       2,
       2,       1,       3,       3,       1,       1,       1,       1,
       1,       1,       1,       1,       2,       3,       1,       2,
       1,       1,       3,       3,       2,       2,       3,       3,
       2,       2,       1,       2,       3,       1,       1,       3,
       3,
};

int yychk[] = {
   -1000,      -1,      -2,      -3,      -7,      -4,      -8,      -5,
      -6,     309,     -30,     -18,     -29,     -14,     -17,     -28,
     -13,     -15,     -24,     -12,     -10,     315,     310,     325,
     311,     313,     312,     319,     317,     324,     282,      -3,
      -4,      -8,      -9,     295,     -31,     -34,     -33,     284,
     -19,     -23,     -20,     284,     -13,     -17,     -29,     -26,
     314,     -16,     295,     -25,     295,     310,     295,     288,
     293,     285,     -35,     -44,     -45,     -36,     -38,     -40,
     -42,     -37,     -14,     -39,     -41,     -43,     -59,      -9,
     -62,     -46,     -60,     -58,     296,     316,     325,     -55,
     -56,     285,     -22,     -21,     295,     -27,      -9,     283,
     294,     -11,     -93,     -94,     -95,     -96,     -97,     -98,
     308,     -99,    -100,    -101,     264,     265,     260,     -92,
     -87,     -56,    -104,    -103,     280,    -102,      -9,     305,
     306,     -55,    -105,     307,     318,     295,     -44,     288,
     -38,     -36,     -40,     -14,     288,     -36,     -38,     -14,
     -58,     -37,     -39,     -41,     -43,     289,     -57,     289,
     275,    -106,     282,     -64,     288,     -73,     284,     -47,
     -49,     -48,     284,     293,     295,     296,     -63,     295,
     -67,     280,     -58,      -9,     291,     283,     283,     326,
     290,     292,     273,     272,     266,     267,     268,     269,
     270,     271,     264,     265,     261,     262,     263,    -100,
     294,    -100,    -100,     -57,     293,     -92,     -87,     -56,
     -68,     -69,     284,     293,     -11,    -107,    -108,     280,
     295,     288,     288,     288,     288,     295,     -61,     -32,
     -11,     -68,     -24,    -106,     -61,     -61,     283,     -11,
     285,     -74,     -75,     -77,     -78,     -79,     -76,     -64,
     -80,     -81,     -82,     -86,     -83,     323,     -11,     -92,
     -37,     297,     -88,     -89,     -91,     303,     302,     304,
     320,     301,     299,     300,     -55,     -56,     285,     -50,
     -54,     -53,     -52,     -14,     -51,     295,     -63,     260,
     261,     262,     263,     264,     265,     266,     267,     268,
     269,     270,     271,     272,     273,     289,     -63,     281,
     -66,     -65,     -59,     295,     -21,     -55,      -9,     -11,
     -11,     -68,     -95,     -96,     -97,     -97,     -98,     -98,
     -98,     -98,     -99,     -99,    -100,    -100,    -100,      -9,
    -105,     285,     -70,     -71,     -72,     -11,     -68,     280,
     307,      -9,    -105,     281,     281,    -109,     -11,     -68,
     -31,     283,     285,     -75,     288,     -77,     -78,     -64,
     -80,     -81,     288,     -76,     -79,     -77,     -78,     -64,
     -80,     -81,     -82,     -84,     -85,     321,     322,     -84,
     -85,     -11,     289,     275,     276,     277,     278,     279,
     -87,     288,     -11,     -68,     288,     288,     -64,     -87,
     -75,     280,     -54,     288,     -52,     289,     -63,     -63,
     -63,     -63,     -63,     -63,     -63,     -63,     -63,     -63,
     -63,     -63,     -63,     -63,     -63,     291,     281,     287,
     285,     291,     -11,     281,     291,     288,     288,     280,
     -64,     288,     -11,     -68,     -11,     -11,     -11,     -11,
     -11,     -75,     288,     288,     -75,     301,     288,     -90,
     -37,     -79,     294,     -65,     -11,     285,     -71,     291,
     -11,     -68,     -59,     298,     -87,     -11,     288,     -11,
     -68,     281,     -75,     288,     288,     -11,     281,     281,
     -64,     -79,     288,     281,     -79,     -75,     281,     -75,
};

int yydef[] = {
       1,      -2,       2,       3,       9,       5,      10,       7,
       8,       0,       0,      34,      53,       0,      32,      51,
      24,       0,       0,      22,      23,      29,      45,       0,
      16,      17,      18,      19,      20,      21,       0,       4,
       6,      11,       0,      26,      55,       0,      58,      57,
      35,      43,      41,      36,      25,      33,      54,       0,
      48,      31,      30,      50,      47,      46,       0,      12,
      28,      60,      59,      79,      69,       0,       0,      77,
      78,      61,       0,      63,      65,      67,     102,      -2,
       0,       0,      98,       0,       0,      81,       0,      96,
      97,      44,      42,      38,      37,      52,      49,      13,
     247,       0,     207,     209,     213,     215,     217,     220,
     221,     226,     229,     233,       0,       0,       0,     237,
     248,     250,     256,     257,       0,     244,      94,     245,
     246,     249,     251,     241,       0,      27,      80,      70,
       0,       0,      76,       0,      71,       0,       0,       0,
       0,      62,      64,      66,      68,       0,      95,       0,
       0,     254,       0,     125,     126,       0,     147,      82,
       0,      84,      83,      99,     100,       0,     108,       0,
       0,     130,       0,      94,      40,      14,      15,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,     234,
     247,     235,     236,     261,     264,     238,     248,     250,
     239,       0,     136,     260,       0,     265,       0,     266,
     240,      72,      73,      74,      75,     100,     103,     133,
     134,     135,       0,     255,     105,     106,     252,       0,
     148,       0,     150,     153,     154,       0,       0,     159,
     160,     161,     162,     180,       0,       0,     199,     237,
     152,       0,     191,     192,     193,       0,       0,       0,
       0,       0,       0,       0,      -2,      -2,      86,      85,
      92,       0,      89,       0,       0,      87,     107,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,     109,     131,
       0,     128,     127,     101,      39,     208,      94,       0,
     211,     212,     214,     216,     218,     219,     222,     223,
     224,     225,     227,     228,     230,     231,     232,     262,
     263,     137,       0,     140,     142,     143,     144,       0,
     242,     258,     259,     243,     267,       0,     269,     270,
      56,     253,     149,     151,     155,     163,     164,     165,
     166,     167,     156,       0,       0,     168,     169,     170,
     171,     172,     173,     179,     182,       0,       0,     178,
     181,       0,       0,       0,       0,       0,       0,       0,
       0,     194,       0,       0,     197,     198,     175,       0,
       0,       0,      93,      91,      90,       0,     110,     111,
     112,     113,     114,     115,     116,     117,     118,     119,
     120,     121,     122,     123,     124,       0,     132,       0,
     138,       0,       0,     268,       0,     157,     158,       0,
     177,     174,     200,     201,     202,     203,     204,     205,
     206,     183,     195,     196,     185,       0,       0,       0,
     187,     188,      88,     129,     210,     139,     141,       0,
     271,     272,       0,       0,       0,       0,       0,       0,
       0,       0,     184,     186,       0,       0,     145,     146,
     176,       0,       0,       0,       0,     189,       0,     190,
};

	int yyxi;

	final int endStack = 100;
	final int newState = 101;

	final int YYMAXDEPTH = 200;
	final int YYREDMAX  = 1000;
	final int PCYYFLAG = -1000;
	final int WAS0ERR = 0;
	final int WAS1ERR = 1;
	final int WAS2ERR = 2;
	final int WAS3ERR = 3;

	Token yylval = new Token();
	Token yyval = new Token();

	Token[] s = new Token[YYMAXDEPTH];     /* value stack */
	int pcyyerrfl = 0;           /* error flag */
	int pcyyerrct = 0;           /* error count */
	
	int[] redseq = new int[YYREDMAX];
	int redcnt = 0;
	int pcyytoken = -1;          /* input token */

	int[] statestack = new int[YYMAXDEPTH]; /* state stack */
	int j, m;              /* working index */
	int s1;
	int tmpstate = 0, tmptoken = -1, n;

	int ssPos = -1;
	int sp = -1;

	Parser parser;

	Lexer getLexer() {
		return parser.getLexer();
	}

	void recover() {
		if(yylval.getId() != 0) {
			pcyytoken = -1;
			pcyyerrfl = WAS0ERR;
		}
	}

	void error(IPosition position, String message) {
		parser.getCompilationUnit().error(position, message);
	}

	void error() {
		error(yylval);
	}

	void error(IToken token) {
		error(token, null);
	}

	void error(String message) {
		error(getLexer().previousToken(), message);
	}

	void error(IToken token, String message) {
		if(token != null && token.getPosition() != null) { // empty or fully commented file
			message = message != null ? message : "delete this token";
			parser.getCompilationUnit().error(token.getPosition(), "Syntax error on token '" + getLexer().getString(token.getPosition()) + "', " + message);
		} else if(token != null && token.getId() == 0) {
			token = getLexer().previousToken();
			if(token.getPosition() != null)
				parser.getCompilationUnit().error(token.getPosition(), "Syntax error on token '" + getLexer().getString(token.getPosition()) + "', unexpected end of file");
		}
	}

	int lex() {
		yylval = getLexer().nextToken();
		return yylval.getId(); 
	}

	int parse(Parser parser) {
		this.parser = parser;

		int nResult = endStack;

		while(true) {
			// endStack:
			if(nResult == endStack) {
				/* push stack */
				if(++ssPos - YYMAXDEPTH > 0) {
					error(); //"pcyacc internal stack overflow"
					return(1);
				}
				statestack[ssPos] = tmpstate;
				++sp;
				s[sp] = yyval;
			}

			// newState:
			n = yypact[tmpstate];
			if (n <= PCYYFLAG) {
				nResult = doDefault();
				if(nResult < endStack)
					return nResult;
				continue; // defaultact; /*  a simple state */
			}

			if(pcyytoken < 0) {
				if((pcyytoken = lex()) < 0)
					pcyytoken = 0;
			}

			if((n += pcyytoken) < 0 || n >= YYLAST) {
				nResult = doDefault();
				if(nResult < endStack)
					return nResult;
				continue; // defaultact;
			}

			if(yychk[n=yyact[n]] == pcyytoken) { 
			/* a shift */
				pcyytoken = -1;
				yyval = yylval;
				tmpstate = n;
				if(pcyyerrfl > 0)
					--pcyyerrfl;
				continue; // enstack;
			}

			nResult = doDefault();

			if(nResult < endStack)
				return nResult;
		}
	}

	int doDefault() {
		if ((n=yydef[tmpstate]) == -2) {
			if (pcyytoken < 0) {
				if((pcyytoken = lex()) < 0)
					pcyytoken = 0;
			}

			for(yyxi = 0; (yyexca[yyxi] != -1) || (yyexca[yyxi + 1] != tmpstate); yyxi += 2) {
			}

			while(yyexca[yyxi += 2] >= 0) {
				if(yyexca[yyxi] == pcyytoken)
					break;
			}

			if((n = yyexca[yyxi + 1]) < 0) /* an accept action */
				return (0);
		}

		if(n == 0) {
			/* error situation */
			switch (pcyyerrfl) {
			case WAS0ERR:          /* an error just occurred */
				error();
				++pcyyerrct;
			case WAS1ERR:
			case WAS2ERR:           /* try again */
				pcyyerrfl = WAS3ERR;
				/* find a state for a legal shift action */
				while (ssPos >= 0) {
					n = yypact[statestack[ssPos]] + YYERRCODE;
					if(n >= 0 && n < YYLAST && yychk[yyact[n]] == YYERRCODE) {
						tmpstate = yyact[n];  /* simulate a shift of "error" */
						return endStack;//break enstack;
					}
					n = yypact[statestack[ssPos]];

					/* the current yyps has no shift on "error", pop stack */
					--ssPos;
					--sp;
				}
				return(1);
			case WAS3ERR:  /* clobber input char */
				if (pcyytoken == 0)
					return 1; /* quit */
				pcyytoken = -1;
				return newState;
			} /* switch */
		} /* if */


		/* reduction, given a production n */
		ssPos -= yyr2[n];
		s1 = sp;
		sp -= yyr2[n];
		yyval = s[sp + 1];
		m = n;
		/* find next state from goto table */
		n = yyr1[n];
		j = yypgo[n] + statestack[ssPos] + 1;
		if(j >= YYLAST || yychk[ tmpstate = yyact[j] ] != -n) 
			tmpstate = yyact[yypgo[n]];

		switch (m) {
			
case 9:
{ parser.onImport(); } break;
case 10:
{ parser.onImportList(true); } break;
case 11:
{ parser.onImportList(false); } break;
case 12:
{ parser.onImportElement(s[s1 - 2], s[s1 - 0]); } break;
case 13:
{ parser.onAttribute(s[s1 - 2], s[s1 - 1], null, s[s1 - 0]); } break;
case 14:
{ parser.onAttribute(s[s1 - 3], s[s1 - 2], s[s1 - 1], s[s1 - 0]); } break;
case 15:
{ parser.onAttribute(s[s1 - 3], s[s1 - 2], s[s1 - 0]); } break;
case 16:
{ parser.onToken(s[s1 - 0]); } break;
case 17:
{ parser.onToken(s[s1 - 0]); } break;
case 18:
{ parser.onToken(s[s1 - 0]); } break;
case 19:
{ parser.onToken(s[s1 - 0]); } break;
case 20:
{ parser.onToken(s[s1 - 0]); } break;
case 21:
{ parser.onToken(s[s1 - 0]); } break;
case 24:
{ parser.onModifiers(true); } break;
case 25:
{ parser.onModifiers(false); } break;
case 26:
{ parser.onQualifiedName(true, s[s1 - 0]); } break;
case 27:
{ parser.onQualifiedName(false, s[s1 - 0]); } break;
case 28:
{ error(s[s1 - 0]); } break;
case 29:
{ parser.startEnum(s[s1 - 0]); } break;
case 30:
{ parser.setEnumName(s[s1 - 0]); } break;
case 33:
{ parser.applyModifiers(); } break;
case 34:
{ error("EnumBody is missing"); } break;
case 36:
{ parser.startEnumBody(s[s1 - 0]); } break;
case 37:
{ parser.addEnumMember(s[s1 - 0]); } break;
case 43:
{ error("'}' expected after this token"); } break;
case 44:
{ parser.finishEnumBody(s[s1 - 0]); } break;
case 45:
{ parser.startClass(null, s[s1 - 0]); } break;
case 46:
{ parser.startClass(s[s1 - 1], s[s1 - 0]); } break;
case 47:
{ parser.setClassName(s[s1 - 0]); } break;
case 49:
{ parser.setClassBase(); } break;
case 54:
{ parser.applyModifiers(); } break;
case 55:
{ parser.finishClass(); } break;
case 56:
{ parser.finishClass(); } break;
case 57:
{ parser.startClassBody(s[s1 - 0]); } break;
case 60:
{ parser.finishClassBody(s[s1 - 0]); } break;
case 62:
{ parser.applyModifiers(); } break;
case 64:
{ parser.applyModifiers(); } break;
case 66:
{ parser.applyModifiers(); } break;
case 68:
{ parser.applyModifiers(); } break;
case 69:
{ parser.addClassMember(); } break;
case 72:
{ parser.onMissingSemicolon();} break;
case 73:
{ parser.onMissingSemicolon();} break;
case 74:
{ parser.onMissingSemicolon();} break;
case 75:
{ parser.onMissingSemicolon();} break;
case 76:
{ parser.onMissingSemicolon();} break;
case 81:
{ parser.startRecords(s[s1 - 0]); } break;
case 82:
{ parser.finishRecords(); } break;
case 83:
{ parser.startRecordsBody(s[s1 - 0]); } break;
case 86:
{ parser.finishRecordsBody(s[s1 - 0]); } break;
case 87:
{ parser.startRecord(s[s1 - 0]); } break;
case 88:
{ parser.setRecordValue(s[s1 - 0]); } break;
case 90:
{ parser.applyModifiers(); } break;
case 91:
{ parser.addRecord(); } break;
case 94:
{ parser.onVariableType(false); } break;
case 95:
{ parser.onVariableType(true); } break;
case 99:
{ error(s[s1 - 0]); } break;
case 100:
{ parser.onVariableDeclarator(s[s1 - 0]); } break;
case 101:
{ parser.onVariableDeclarator(s[s1 - 2], s[s1 - 0]); } break;
case 103:
{ parser.onVariableDeclaratorInit(s[s1 - 1]); } break;
case 104:
{ parser.onVariableInit(null); } break;
case 105:
{ parser.onVariableInit(s[s1 - 1]); } break;
case 106:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onVariableInit(s[s1 - 1]); } break;
case 107:
{ parser.createMethod(s[s1 - 1]); } break;
case 108:
{ parser.createPriorityOperator(s[s1 - 1]); } break;
case 109:
{ parser.createCastOperator(s[s1 - 2], s[s1 - 1]); } break;
case 110:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 111:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 112:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 113:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 114:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 115:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 116:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 117:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 118:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 119:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 120:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 121:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 122:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 123:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 124:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 125:
{ parser.setMethodBody(); } break;
case 127:
{ parser.createParameter(); } break;
case 130:
{ parser.startParameters(s[s1 - 0]); } break;
case 131:
{ parser.finishParameters(s[s1 - 0]); } break;
case 132:
{ parser.finishParameters(s[s1 - 0]); } break;
case 136:
{ parser.startArrayInitializer(s[s1 - 0]); } break;
case 138:
{ parser.finishArrayInitializer(s[s1 - 0]); } break;
case 139:
{ parser.finishArrayInitializer(s[s1 - 0]); } break;
case 142:
{ parser.addArrayInitializer(); } break;
case 143:
{ parser.addArrayInitializer(); } break;
case 144:
{ parser.addArrayInitializer(); } break;
case 145:
{ parser.onMapElement(s[s1 - 4], s[s1 - 0]); } break;
case 146:
{ parser.onMapElement(s[s1 - 4], s[s1 - 0]); } break;
case 147:
{ parser.startCompound(s[s1 - 0]); } break;
case 148:
{ parser.finishCompound(s[s1 - 0]); } break;
case 149:
{ parser.finishCompound(s[s1 - 0]); } break;
case 150:
{ parser.addStatement(); } break;
case 151:
{ parser.addStatement(); } break;
case 152:
{ parser.onDeclarator(); } break;
case 155:
{ parser.onStatement(); } break;
case 156:
{ parser.onStatement(); } break;
case 157:
{ parser.onStatement2(); } break;
case 158:
{ parser.onStatement2(); } break;
case 163:
{ parser.onStatement1(); } break;
case 164:
{ parser.onStatement1(); } break;
case 165:
{ parser.onStatement1(); } break;
case 166:
{ parser.onStatement1(); } break;
case 167:
{ parser.onStatement1(); } break;
case 168:
{ parser.onStatement1(); } break;
case 169:
{ parser.onStatement1(); } break;
case 170:
{ parser.onStatement1(); } break;
case 171:
{ parser.onStatement1(); } break;
case 172:
{ parser.onStatement1(); } break;
case 173:
{ parser.onStatement1(); } break;
case 174:
{ parser.onThrowStatement(s[s1 - 2]); } break;
case 175:
{ parser.onTryStatement(s[s1 - 1]); } break;
case 176:
{ parser.onCatchClause(s[s1 - 4]); } break;
case 177:
{ parser.onFinallyStatement(s[s1 - 1]); } break;
case 178:
{ parser.addCatchStatement(); } break;
case 179:
{ parser.addCatchStatement(); } break;
case 183:
{ parser.onIfStatement(s[s1 - 2], null); } break;
case 184:
{ parser.onIfStatement(s[s1 - 4], s[s1 - 1]); } break;
case 185:
{ parser.onWhileStatement(s[s1 - 2]); } break;
case 186:
{ parser.onDoWhileStatement(s[s1 - 4], s[s1 - 2]); } break;
case 187:
{ parser.onDeclarator(); } break;
case 189:
{ parser.onForStatement(s[s1 - 7], false); } break;
case 190:
{ parser.onForStatement(s[s1 - 8], true); } break;
case 194:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 195:
{ parser.onJumpStatement(s[s1 - 2], true); } break;
case 196:
{ parser.onJumpStatement(s[s1 - 2], true); } break;
case 197:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 198:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 200:
{ parser.onAssignment(s[s1 - 1]); } break;
case 201:
{ parser.onAssignment(s[s1 - 1]); } break;
case 202:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 203:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 204:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 205:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 206:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 208:
{ parser.onInstanceOf(s[s1 - 1]); } break;
case 210:
{ parser.onTernaryOperator(s[s1 - 3], s[s1 - 1]); } break;
case 211:
{ parser.onElvisOperator(s[s1 - 1]); } break;
case 212:
{ parser.onElvisOperator(s[s1 - 1]); } break;
case 214:
{ parser.onOperator(s[s1 - 1]); } break;
case 216:
{ parser.onOperator(s[s1 - 1]); } break;
case 218:
{ parser.onOperator(s[s1 - 1]); } break;
case 219:
{ parser.onOperator(s[s1 - 1]); } break;
case 221:
{ parser.onNull(s[s1 - 0]); } break;
case 222:
{ parser.onOperator(s[s1 - 1]); } break;
case 223:
{ parser.onOperator(s[s1 - 1]); } break;
case 224:
{ parser.onOperator(s[s1 - 1]); } break;
case 225:
{ parser.onOperator(s[s1 - 1]); } break;
case 227:
{ parser.onOperator(s[s1 - 1]); } break;
case 228:
{ parser.onOperator(s[s1 - 1]); } break;
case 230:
{ parser.onOperator(s[s1 - 1]); } break;
case 231:
{ parser.onOperator(s[s1 - 1]); } break;
case 232:
{ parser.onOperator(s[s1 - 1]); } break;
case 235:
{ parser.onUnary(s[s1 - 1]); } break;
case 236:
{ parser.onUnary(s[s1 - 1]); } break;
case 238:
{ parser.onTypeCast(); } break;
case 239:
{ parser.onArrayTypeCast(); } break;
case 240:
{ parser.onNewExpression(s[s1 - 1], s[s1 - 0]); } break;
case 241:
{ parser.onContainer(s[s1 - 0]); } break;
case 242:
{ parser.addContainer(s[s1 - 0]); } break;
case 243:
{ parser.onBracedExpression(s[s1 - 2], s[s1 - 0]); } break;
case 245:
{ parser.onThis(s[s1 - 0]); } break;
case 246:
{ parser.onSuper(s[s1 - 0]); } break;
case 247:
{ parser.onConstant(s[s1 - 0]); } break;
case 249:
{ parser.onTypeToPostfix(); } break;
case 250:
{ parser.onTypeToPostfix(); } break;
case 251:
{ parser.onMethodCall(false); } break;
case 252:
{ parser.onIndex(s[s1 - 1], s[s1 - 0], false); } break;
case 253:
{ parser.onIndex(s[s1 - 2], s[s1 - 0], true); } break;
case 254:
{ parser.onIndices(true); } break;
case 255:
{ parser.onIndices(false); } break;
case 258:
{ parser.onPostfix(); } break;
case 259:
{ parser.onMethodCall(true); } break;
case 260:
{ error(s[s1 - 0]); } break;
case 261:
{ parser.onArrayAccess(); } break;
case 262:
{ parser.onPostfix(); } break;
case 263:
{ parser.onMethodCall(true); } break;
case 264:
{ error(s[s1 - 0]); } break;
case 266:
{ parser.startExpressions(s[s1 - 0]); } break;
case 267:
{ parser.finishExpressions(s[s1 - 0]); } break;
case 268:
{ parser.finishExpressions(s[s1 - 0]); } break;
case 269:
{ parser.addExpression(); } break;
case 270:
{ parser.addExpression(); } break;
case 271:
{ parser.addExpression(); } break;
case 272:
{ parser.addExpression(); } break;
		}
		return endStack;
	}
}