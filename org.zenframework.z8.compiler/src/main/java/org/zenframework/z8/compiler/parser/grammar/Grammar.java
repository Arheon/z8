
package org.zenframework.z8.compiler.parser.grammar;

//import org.zenframework.z8.compiler.core.ILanguageElement;
import org.zenframework.z8.compiler.core.IPosition;
import org.zenframework.z8.compiler.core.IToken;
import org.zenframework.z8.compiler.parser.grammar.lexer.Lexer;
import org.zenframework.z8.compiler.parser.grammar.lexer.token.Token;

public class Grammar
{
int WHITESPACE = 257;
int LINEBREAK = 258;
int COMMENT = 259;
int NOT = 260;
int MUL = 261;
int DIV = 262;
int MOD = 263;
int ADD = 264;
int SUB = 265;
int EQU = 266;
int NOT_EQU = 267;
int LESS = 268;
int MORE = 269;
int LESS_EQU = 270;
int MORE_EQU = 271;
int AND = 272;
int OR = 273;
int GROUP = 274;
int ADD_ASSIGN = 275;
int SUB_ASSIGN = 276;
int MUL_ASSIGN = 277;
int DIV_ASSIGN = 278;
int MOD_ASSIGN = 279;
int LBRACE = 280;
int RBRACE = 281;
int LBRACKET = 282;
int RBRACKET = 283;
int LCBRACE = 284;
int RCBRACE = 285;
int BRACKETS = 286;
int COLON = 287;
int SEMICOLON = 288;
int ASSIGN = 289;
int QUESTION = 290;
int COMMA = 291;
int ELVIS = 292;
int DOT = 293;
int CONSTANT = 294;
int IDENTIFIER = 295;
int OPERATOR = 296;
int IF = 297;
int ELSE = 298;
int DO = 299;
int FOR = 300;
int WHILE = 301;
int BREAK = 302;
int RETURN = 303;
int CONTINUE = 304;
int THIS = 305;
int SUPER = 306;
int CONTAINER = 307;
int NULL = 308;
int IMPORT = 309;
int CLASS = 310;
int PUBLIC = 311;
int PROTECTED = 312;
int PRIVATE = 313;
int EXTENDS = 314;
int ENUM = 315;
int RECORDS = 316;
int AUTO = 317;
int NEW = 318;
int STATIC = 319;
int TRY = 320;
int CATCH = 321;
int FINALLY = 322;
int THROW = 323;
int VIRTUAL = 324;
int FINAL = 325;
int INSTANCE_OF = 326;
int YYERRCODE = 256;

int yyexca[] = {
  -1, 1,
  0, -1,
  -2, 0,
  -1, 71,
  295, 94,
  296, 94,
  -2, 104,
  -1, 234,
  295, 96,
  -2, 250,
  -1, 235,
  295, 97,
  -2, 251,
  -1, 393,
  288, 102,
  -2, 189,
  0,
};

int YYNPROD = 275;
int YYLAST = 1257;
int yyact[] = {
     108,      35,     261,      99,     292,     159,     109,     323,
     324,      48,      53,       9,     263,      30,     113,     387,
      35,      70,      35,     153,     403,     211,     148,     149,
      35,      84,     243,     107,     265,     394,     287,      78,
     195,     190,     151,     117,     102,      54,      52,      79,
     100,     101,      24,      26,      25,      80,      78,     208,
      28,      50,      27,     189,     116,     138,     222,      29,
     113,      56,     181,      79,     185,      30,      79,      79,
      56,      80,     138,      79,      80,      80,     178,      35,
     156,      80,      35,      76,     189,     176,     147,      79,
     403,     105,     106,     112,      96,      80,      22,     403,
     138,      56,      24,      26,      25,      65,     116,      77,
      28,      55,      27,      56,     136,      23,      56,      29,
      78,     133,     366,     138,     347,      30,     420,     182,
     367,      65,     135,     119,      65,      65,      56,     297,
      66,     129,      35,      76,      79,     369,     364,     102,
      79,     399,      80,     100,     101,     407,      80,     370,
     363,     162,      24,      26,      25,     413,     234,     412,
      28,     221,      27,     113,     235,     406,     385,      29,
      78,      79,     160,     388,     161,     384,      30,      80,
     267,     178,      35,     375,     124,     142,     372,     220,
     371,     140,     264,      35,     105,     106,     112,      96,
     345,     339,     129,     338,     194,     193,     129,     192,
     343,     116,     141,      24,      26,      25,     142,     191,
      78,      28,     306,      27,     365,     236,      81,      57,
      29,      78,     142,     223,     185,     232,     233,     231,
     234,      39,     146,     221,      43,     234,     235,     303,
     221,     158,     157,     235,     138,     426,      89,     422,
     421,      99,     230,     417,     416,     219,     410,     297,
     373,     234,     314,     108,     221,     153,     163,     235,
     164,     165,     109,     170,     171,     213,     240,     299,
      93,     102,      69,     334,     322,     100,     101,     305,
     188,     113,      92,     341,     329,     330,     331,     332,
     333,      18,      36,     138,     207,     113,     172,     173,
     174,     142,     328,     187,       3,     312,     176,      31,
     342,     186,     373,     178,      35,     238,     223,      83,
     232,     233,     231,     228,     227,     229,     105,     106,
     112,      96,     103,     215,     212,     198,     321,     198,
     198,     104,     205,     116,       3,     230,     114,      14,
     219,      63,      78,     170,     171,     132,     139,     166,
     167,     168,     169,     111,     216,      45,     110,       5,
     269,     270,     199,      32,      91,      90,      61,     234,
     343,      12,     221,     214,     226,     235,     234,     390,
     234,     221,      59,     221,     235,     134,     235,      46,
     294,     232,     133,     389,     300,      14,     137,      32,
       5,     393,     231,     225,      79,     392,     138,     224,
     217,     387,      80,     218,     398,     160,      79,     122,
     395,     207,     141,     293,      80,     264,     383,      69,
      12,     211,      68,     327,     291,     386,     334,     402,
     184,     210,     152,     336,     121,     125,     391,     200,
     262,     200,     200,     292,     234,     118,      97,     221,
     263,      72,     235,     363,     273,      74,     413,     404,
     239,     221,      62,     242,      70,     272,     234,     234,
     221,     221,     221,     234,     235,     235,     221,     341,
     107,     235,     403,     419,      63,     161,     184,     237,
     183,     420,     423,     144,     266,     211,     222,     145,
      30,     175,     143,     411,      94,     131,      73,      60,
      62,     309,     317,     421,      61,      35,     370,     196,
     368,      59,      18,     302,     219,     424,     425,     326,
     422,     426,     427,     208,     340,      24,      26,      25,
     120,     126,     102,      28,     209,      27,     100,     101,
     346,      64,      29,      78,     271,     201,      58,     227,
     376,     378,     379,     380,     381,     382,     296,     286,
     296,      37,     185,     397,     289,      38,     131,     311,
     319,     313,     328,     295,     178,      35,      68,     301,
     197,     325,      93,     344,      10,     134,      15,     105,
     106,     112,      96,      92,     175,     396,     201,     294,
     328,     320,     400,      62,     116,      85,      47,      51,
     329,      62,     330,     331,     332,     333,     365,     310,
     318,      41,      83,     212,     405,      82,     337,      42,
     137,      30,     115,     230,     367,      40,     183,     408,
     388,      36,     374,     175,      34,     399,     414,     415,
     406,     280,     281,     322,      11,      49,     407,     220,
      17,      19,     324,      20,       9,      22,      24,      26,
      25,     240,      21,       4,      28,      38,      27,     202,
     203,      71,     184,      29,      23,     308,     316,       8,
       7,      30,      86,     212,       2,     181,     212,       1,
     110,     274,     275,     215,     410,      71,      35,      76,
      71,      71,     370,       0,     321,      71,     238,       6,
     227,       0,     152,       0,      33,       0,      24,      26,
      25,     155,      30,       0,      28,     216,      27,       0,
       0,      58,     212,      29,      78,       0,       0,       0,
     418,       0,     214,     377,       0,       0,       0,       0,
     213,       6,     136,     196,     235,       0,      22,      24,
      26,      25,       0,      21,       0,      28,       0,      27,
       0,       0,       0,       0,      29,      23,      71,     171,
      97,     102,      71,       0,       0,     100,     101,       0,
     307,     315,     295,       0,       0,     401,     212,       0,
       0,       0,       0,       0,     367,     113,     210,       0,
       0,     185,       0,     155,      67,     335,     115,       0,
       0,     102,     268,     178,      35,     100,     101,     165,
      94,       0,     409,       0,     399,       0,     105,     106,
     112,      96,       0,     285,     199,     113,       0,       0,
     288,     142,     304,     116,       0,       0,       0,       0,
       0,       0,       0,     178,      35,       0,     223,       0,
     232,     233,     231,     228,     227,     229,     105,     106,
     112,      96,     102,       0,       0,       0,     100,     101,
       0,       0,       0,     116,       0,     230,       0,     130,
     219,       0,      78,       0,       0,       0,     113,       0,
     212,       0,     142,     206,       0,       0,       0,       0,
     209,       0,       0,       0,     178,      35,       0,     223,
       0,     232,     233,     231,     228,     227,     229,     105,
     106,     112,      96,     102,       0,       0,       0,     100,
     101,       0,       0,       0,     116,       0,     230,     176,
       0,     219,       0,      78,       0,       0,       0,     113,
     130,     150,       0,     142,     130,       0,       0,      67,
     181,       0,      95,     363,       0,     178,      35,       0,
     223,       0,     232,     233,     231,     228,     227,     229,
     105,     106,     112,      96,       0,     102,       0,       0,
       0,     100,     101,       0,     102,     116,       0,     230,
     100,     101,     219,       0,      78,       0,       0,       0,
       0,     113,     298,       0,       0,     185,       0,       0,
     296,       0,       0,       0,     185,     290,       0,     178,
      35,       0,       0,       0,     102,       0,     178,      35,
     100,     101,     105,     106,     112,      96,       0,       0,
       0,     105,     106,     112,      96,     102,     155,     116,
     113,     100,     101,       0,     185,      98,     116,       0,
     155,       0,       0,       0,       0,       0,     178,      35,
       0,     113,       0,       0,     204,       0,       0,       0,
       0,     105,     106,     112,      96,     102,       0,     178,
      35,     100,     101,       0,     102,       0,     116,       0,
     100,     101,     105,     106,     112,      96,       0,       0,
       0,     113,       0,       0,      87,      16,       0,     116,
     113,       0,       0,       0,       0,       0,     244,      88,
      35,     260,       0,      44,     102,       0,     178,      35,
     100,     101,     105,     106,     112,      96,       0,       0,
       0,     105,     106,     112,      96,     113,      13,     116,
     113,     276,     277,     278,     279,       0,     116,       0,
       0,       0,      16,     178,      35,       0,     178,      35,
       0,       0,     177,     179,     180,       0,     105,     106,
     112,     105,     106,     112,       0,       0,       0,       0,
      44,       0,       0,     116,       0,      66,     116,     245,
     246,     247,     248,     249,     250,     251,     252,     253,
     254,     255,     256,     257,     258,       0,       0,       0,
       0,      66,       0,       0,     123,     127,       0,       0,
       0,      61,     128,       0,     259,       0,     151,     348,
     349,     350,     351,     352,     353,     354,     355,     356,
     357,     358,     359,     360,     361,     362,     245,       0,
       0,      44,     282,     283,     284,      44,       0,     101,
       0,     102,     172,       0,       0,       0,       0,       0,
       0,      75,       0,       0,       0,       0,       0,     167,
     168,     169,      95,       0,       0,       0,       0,       0,
       0,       0,      62,       0,       0,      75,     145,       0,
      75,       0,       0,       0,       0,      75,       0,       0,
       0,       0,       0,       0,       0,       0,     128,       0,
     241,     154,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,     246,     247,
     248,     249,     250,     251,     252,     253,     254,     255,
     256,     257,     258,     259,     150,       0,      75,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
     173,     174,      98,       0,       0,       0,       0,      44,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,     123,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,     241,       0,       0,       0,
      13,
};

int yypact[] = {
     279,   -1000,     360,     360,    -298,   -1000,   -1000,   -1000,
   -1000,    -271,     -75,     -72,   -1000,     360,   -1000,    -305,
   -1000,    -246,    -257,   -1000,   -1000,   -1000,   -1000,    -300,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,    -258,     360,
   -1000,   -1000,    -191,   -1000,   -1000,     -86,    -221,   -1000,
   -1000,     -87,    -270,   -1000,   -1000,   -1000,   -1000,    -271,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,     697,   -1000,
    -260,   -1000,    -221,   -1000,   -1000,    -173,    -124,   -1000,
   -1000,   -1000,    -221,   -1000,   -1000,   -1000,    -184,    -175,
    -119,     -74,    -215,    -273,    -261,   -1000,    -271,   -1000,
   -1000,   -1000,    -219,   -1000,   -1000,   -1000,    -236,   -1000,
     -65,     -66,    -321,    -136,     -34,   -1000,     -26,      51,
   -1000,       9,   -1000,    -216,     736,     736,     736,   -1000,
    -235,   -1000,   -1000,     733,   -1000,     -80,   -1000,   -1000,
   -1000,     704,   -1000,    -229,    -262,   -1000,   -1000,   -1000,
     -97,    -105,   -1000,     327,   -1000,    -107,    -108,     166,
    -263,   -1000,   -1000,   -1000,   -1000,    -224,     -62,    -224,
    -224,   -1000,     665,   -1000,   -1000,     510,   -1000,   -1000,
     -88,    -269,   -1000,   -1000,     -43,     795,   -1000,     -43,
    -279,   -1000,    -267,    -194,    -270,   -1000,   -1000,    -271,
     704,     648,     704,     704,     704,     704,     736,     736,
     736,     736,     736,     736,     736,     736,     736,     -62,
    -271,   -1000,   -1000,   -1000,   -1000,    -277,    -216,   -1000,
     616,   -1000,     -50,   -1000,     609,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
     -75,   -1000,   -1000,   -1000,   -1000,     -68,   -1000,     461,
   -1000,   -1000,   -1000,     -94,     -11,   -1000,   -1000,   -1000,
   -1000,    -314,    -314,     704,   -1000,     -15,   -1000,    -266,
   -1000,   -1000,   -1000,     429,    -109,    -111,     -82,    -266,
     559,     -96,   -1000,     -80,   -1000,    -269,   -1000,    -112,
   -1000,    -269,    -181,   -1000,   -1000,     -43,     -43,     -43,
     -43,     -43,     -43,     -43,     -43,     -43,     -43,     -43,
     -43,     -43,     -43,     -43,   -1000,   -1000,    -155,   -1000,
   -1000,   -1000,   -1000,   -1000,    -236,     -91,   -1000,   -1000,
     -34,   -1000,   -1000,   -1000,     -21,     -21,     -21,     -21,
       9,       9,   -1000,   -1000,   -1000,    -204,   -1000,   -1000,
    -204,   -1000,   -1000,    -179,   -1000,   -1000,   -1000,   -1000,
     704,   -1000,   -1000,    -156,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,    -120,    -122,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,     -48,     -82,   -1000,   -1000,    -125,
     648,     704,     704,     704,     704,     704,     559,   -1000,
    -131,    -138,   -1000,   -1000,   -1000,     559,    -286,    -133,
   -1000,   -1000,   -1000,    -265,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,    -294,   -1000,     704,   -1000,     222,
    -162,   -1000,     648,   -1000,   -1000,    -294,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,    -278,
   -1000,   -1000,   -1000,    -266,     704,    -139,    -154,   -1000,
   -1000,    -184,   -1000,   -1000,   -1000,   -1000,   -1000,     648,
   -1000,   -1000,     -51,     559,    -145,    -147,     704,     704,
     -53,     -54,     -82,   -1000,   -1000,     704,    -178,     -57,
   -1000,   -1000,   -1000,     -58,     704,     559,     559,     -60,
   -1000,   -1000,     559,   -1000,
};

int yypgo[] = {
       0,     615,     612,     276,     327,     608,     607,     595,
     631,     562,     587,     167,     585,     981,    1014,     584,
     581,     311,     580,     565,     559,     287,     557,     553,
     265,     543,     542,     541,     526,     337,     524,     266,
     520,     509,     505,     494,     334,      54,     418,     716,
     313,     386,     489,     250,     346,     455,     454,     450,
     447,     443,     439,     419,     246,     416,     285,       0,
       6,     349,    1082,      17,     413,     463,     409,     841,
     245,      12,     400,     394,     330,     392,     388,       4,
     379,     378,     377,      47,     300,     484,     393,      21,
     339,     299,     324,     371,     302,     252,     368,      27,
     367,     363,     355,     343,     340,       3,     333,     332,
     258,     248,     452,     850,     406,     933,     323,     310,
     305,     298,     326,     358,     275,     256,     247,
};

int yyr1[] = {
       0,       1,       1,       1,       1,       3,       3,       4,
       4,       2,       7,       7,       8,      10,      10,      10,
      12,      12,      12,      12,      12,      12,      13,      13,
      14,      14,       9,       9,       9,      15,      16,      17,
      18,      18,       6,       6,      20,      21,      22,      22,
      22,      23,      23,      19,      19,      24,      24,      25,
      26,      27,      28,      29,      29,      30,      30,       5,
      32,      33,      34,      34,      31,      36,      36,      38,
      38,      40,      40,      42,      42,      44,      45,      45,
      45,      45,      45,      45,      45,      45,      45,      35,
      35,      46,      43,      48,      49,      49,      47,      51,
      52,      53,      53,      54,      50,      50,      55,      56,
      58,      58,      59,      59,      60,      60,      37,      37,
      39,      39,      39,      62,      62,      62,      62,      62,
      62,      62,      62,      62,      62,      62,      62,      62,
      62,      62,      62,      62,      62,      41,      41,      65,
      66,      66,      67,      63,      63,      61,      61,      61,
      69,      68,      68,      68,      70,      70,      71,      71,
      71,      72,      72,      73,      64,      64,      74,      74,
      76,      75,      75,      75,      75,      75,      75,      75,
      75,      75,      75,      75,      75,      75,      75,      75,
      75,      75,      75,      75,      75,      75,      78,      83,
      84,      85,      86,      86,      77,      77,      77,      80,
      80,      88,      89,      90,      90,      91,      92,      92,
      92,      81,      81,      81,      82,      82,      82,      82,
      82,      79,      79,      79,      79,      79,      79,      79,
      79,      11,      11,      94,      94,      94,      94,      95,
      95,      96,      96,      97,      97,      97,      98,      98,
      98,      98,      98,      98,      99,      99,      99,     100,
     100,     100,     100,     101,     101,     101,     101,     102,
     102,     103,     104,     104,      87,      87,     105,     105,
     105,     105,     105,     105,     105,     105,     107,     107,
      57,      57,      93,      93,      93,      93,      93,      93,
      93,      93,      93,     106,     109,     108,     108,     110,
     110,     110,     110,
};

int yyr2[] = {
       2,       0,       1,       1,       2,       1,       2,       1,
       1,       1,       1,       2,       3,       3,       4,       4,
       1,       1,       1,       1,       1,       1,       1,       1,
       1,       2,       1,       3,       2,       1,       1,       2,
       1,       2,       1,       2,       1,       1,       1,       3,
       2,       1,       2,       1,       2,       1,       2,       1,
       1,       1,       2,       1,       3,       1,       2,       2,
       2,       1,       1,       2,       2,       1,       2,       1,
       2,       1,       2,       1,       2,       1,       2,       2,
       3,       3,       3,       3,       2,       1,       1,       1,
       2,       1,       2,       1,       1,       2,       2,       1,
       3,       1,       2,       2,       1,       2,       1,       2,
       1,       1,       1,       2,       2,       3,       1,       3,
       1,       3,       3,       3,       2,       3,       4,       4,
       4,       4,       4,       4,       4,       4,       4,       4,
       4,       4,       4,       4,       4,       2,       2,       1,
       1,       3,       1,       2,       3,       1,       1,       1,
       1,       2,       3,       4,       1,       3,       1,       1,
       1,       5,       5,       1,       2,       3,       1,       2,
       1,       1,       1,       2,       2,       3,       3,       1,
       1,       1,       1,       2,       2,       2,       2,       2,
       2,       2,       2,       2,       2,       2,       3,       2,
       5,       2,       2,       2,       1,       2,       2,       3,
       5,       3,       5,       1,       1,       1,       8,       9,
       7,       1,       1,       1,       2,       3,       3,       2,
       2,       1,       3,       3,       3,       3,       3,       3,
       3,       1,       3,       1,       5,       3,       3,       1,
       3,       1,       3,       1,       3,       3,       1,       1,
       3,       3,       3,       3,       1,       3,       3,       1,
       3,       3,       3,       1,       2,       2,       2,       2,
       2,       2,       1,       3,       3,       1,       1,       1,
       1,       1,       1,       1,       1,       1,       2,       3,
       1,       2,       1,       1,       3,       3,       2,       2,
       3,       3,       2,       2,       1,       2,       3,       1,
       1,       3,       3,
};

int yychk[] = {
   -1000,      -1,      -2,      -3,      -7,      -4,      -8,      -5,
      -6,     309,     -30,     -18,     -29,     -14,     -17,     -28,
     -13,     -15,     -24,     -12,     -10,     315,     310,     325,
     311,     313,     312,     319,     317,     324,     282,      -3,
      -4,      -8,      -9,     295,     -31,     -34,     -33,     284,
     -19,     -23,     -20,     284,     -13,     -17,     -29,     -26,
     314,     -16,     295,     -25,     295,     310,     295,     288,
     293,     285,     -35,     -44,     -45,     -36,     -38,     -40,
     -42,     -37,     -14,     -39,     -41,     -43,     -59,      -9,
     -62,     -46,     -60,     -58,     296,     316,     325,     -55,
     -56,     285,     -22,     -21,     295,     -27,      -9,     283,
     294,     -11,     -94,     -95,     -96,     -97,     -98,     -99,
     308,    -100,    -101,     -93,     264,     265,     260,    -105,
    -104,     305,     306,     -87,     -55,     -56,    -106,    -102,
     307,     280,    -103,      -9,     318,     295,     -44,     288,
     -38,     -36,     -40,     -14,     288,     -36,     -38,     -14,
     -58,     -37,     -39,     -41,     -43,     289,     -57,     289,
     275,    -107,     282,     -64,     288,     -73,     284,     -47,
     -49,     -48,     284,     293,     295,     296,     -63,     295,
     -67,     280,     -58,      -9,     291,     283,     283,     326,
     290,     292,     273,     272,     266,     267,     268,     269,
     270,     271,     264,     265,     261,     262,     263,     -57,
     293,    -101,     294,    -101,    -101,     293,     -93,     -68,
     -69,     284,     -11,    -108,    -109,     280,     295,     288,
     288,     288,     288,     295,     -61,     -32,     -11,     -68,
     -24,    -107,     -61,     -61,     283,     -11,     285,     -74,
     -75,     -77,     -78,     -79,     -76,     -64,     -80,     -81,
     -82,     -86,     -83,     323,     -11,     -93,     -37,     297,
     -88,     -89,     -92,     303,     302,     304,     320,     301,
     299,     300,     -55,     -56,     285,     -50,     -54,     -53,
     -52,     -14,     -51,     295,     -63,     260,     261,     262,
     263,     264,     265,     266,     267,     268,     269,     270,
     271,     272,     273,     289,     -63,     281,     -66,     -65,
     -59,     295,     -21,     -55,      -9,     -11,     -11,     -68,
     -96,     -97,     -98,     -98,     -99,     -99,     -99,     -99,
    -100,    -100,    -101,    -101,    -101,      -9,    -106,     307,
      -9,    -106,     285,     -70,     -71,     -72,     -11,     -68,
     280,     281,     281,    -110,     -11,     -68,     -31,     283,
     285,     -75,     288,     -77,     -78,     -64,     -80,     -81,
     288,     -76,     -79,     -77,     -78,     -64,     -80,     -81,
     -82,     -84,     -85,     321,     322,     -84,     -85,     -11,
     289,     275,     276,     277,     278,     279,     -87,     288,
     -11,     -68,     288,     288,     -64,     -87,     -75,     280,
     -54,     288,     -52,     289,     -63,     -63,     -63,     -63,
     -63,     -63,     -63,     -63,     -63,     -63,     -63,     -63,
     -63,     -63,     -63,     291,     281,     287,     285,     291,
     -11,     281,     291,     288,     288,     280,     -64,     288,
     -11,     -68,     -11,     -11,     -11,     -11,     -11,     -75,
     288,     288,     -75,     301,     288,     -90,     -91,     -37,
     -79,     -59,     294,     -65,     -11,     285,     -71,     291,
     -11,     -68,     -59,     298,     -87,     -11,     288,     287,
     -11,     -68,     281,     -75,     288,     288,     -11,     -11,
     281,     281,     -64,     -79,     288,     281,     281,     -79,
     -75,     -75,     281,     -75,
};

int yydef[] = {
       1,      -2,       2,       3,       9,       5,      10,       7,
       8,       0,       0,      34,      53,       0,      32,      51,
      24,       0,       0,      22,      23,      29,      45,       0,
      16,      17,      18,      19,      20,      21,       0,       4,
       6,      11,       0,      26,      55,       0,      58,      57,
      35,      43,      41,      36,      25,      33,      54,       0,
      48,      31,      30,      50,      47,      46,       0,      12,
      28,      60,      59,      79,      69,       0,       0,      77,
      78,      61,       0,      63,      65,      67,     102,      -2,
       0,       0,      98,       0,       0,      81,       0,      96,
      97,      44,      42,      38,      37,      52,      49,      13,
     248,       0,     209,     211,     215,     217,     219,     222,
     223,     228,     231,     235,       0,       0,       0,     258,
     259,     246,     247,     249,     250,     251,     252,     253,
     242,       0,     245,      94,       0,      27,      80,      70,
       0,       0,      76,       0,      71,       0,       0,       0,
       0,      62,      64,      66,      68,       0,      95,       0,
       0,     256,       0,     125,     126,       0,     147,      82,
       0,      84,      83,      99,     100,       0,     108,       0,
       0,     130,       0,      94,      40,      14,      15,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,     263,
     266,     236,     248,     237,     238,     262,     239,     240,
       0,     136,       0,     267,       0,     268,     241,      72,
      73,      74,      75,     100,     103,     133,     134,     135,
       0,     257,     105,     106,     254,       0,     148,       0,
     150,     153,     154,       0,       0,     159,     160,     161,
     162,     180,       0,       0,     201,     235,     152,       0,
     193,     194,     195,       0,       0,       0,       0,       0,
       0,       0,      -2,      -2,      86,      85,      92,       0,
      89,       0,       0,      87,     107,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,     109,     131,       0,     128,
     127,     101,      39,     210,      94,       0,     213,     214,
     216,     218,     220,     221,     224,     225,     226,     227,
     229,     230,     232,     233,     234,     264,     265,     243,
     260,     261,     137,       0,     140,     142,     143,     144,
       0,     244,     269,       0,     271,     272,      56,     255,
     149,     151,     155,     163,     164,     165,     166,     167,
     156,       0,       0,     168,     169,     170,     171,     172,
     173,     179,     182,       0,       0,     178,     181,       0,
       0,       0,       0,       0,       0,       0,       0,     196,
       0,       0,     199,     200,     175,       0,       0,       0,
      93,      91,      90,       0,     110,     111,     112,     113,
     114,     115,     116,     117,     118,     119,     120,     121,
     122,     123,     124,       0,     132,       0,     138,       0,
       0,     270,       0,     157,     158,       0,     177,     174,
     202,     203,     204,     205,     206,     207,     208,     183,
     197,     198,     185,       0,       0,       0,       0,     187,
     188,      -2,      88,     129,     212,     139,     141,       0,
     273,     274,       0,       0,       0,       0,       0,       0,
       0,       0,       0,     184,     186,       0,       0,       0,
     145,     146,     176,       0,       0,       0,       0,       0,
     192,     190,       0,     191,
};

	int yyxi;

	final int endStack = 100;
	final int newState = 101;

	final int YYMAXDEPTH = 200;
	final int YYREDMAX  = 1000;
	final int PCYYFLAG = -1000;
	final int WAS0ERR = 0;
	final int WAS1ERR = 1;
	final int WAS2ERR = 2;
	final int WAS3ERR = 3;

	Token yylval = new Token();
	Token yyval = new Token();

	Token[] s = new Token[YYMAXDEPTH];     /* value stack */
	int pcyyerrfl = 0;           /* error flag */
	int pcyyerrct = 0;           /* error count */
	
	int[] redseq = new int[YYREDMAX];
	int redcnt = 0;
	int pcyytoken = -1;          /* input token */

	int[] statestack = new int[YYMAXDEPTH]; /* state stack */
	int j, m;              /* working index */
	int s1;
	int tmpstate = 0, tmptoken = -1, n;

	int ssPos = -1;
	int sp = -1;

	Parser parser;

	Lexer getLexer() {
		return parser.getLexer();
	}

	void recover() {
		if(yylval.getId() != 0) {
			pcyytoken = -1;
			pcyyerrfl = WAS0ERR;
		}
	}

	void error(IPosition position, String message) {
		parser.getCompilationUnit().error(position, message);
	}

	void error() {
		error(yylval);
	}

	void error(IToken token) {
		error(token, null);
	}

	void error(String message) {
		error(getLexer().previousToken(), message);
	}

	void error(IToken token, String message) {
		if(token != null && token.getPosition() != null) { // empty or fully commented file
			message = message != null ? message : "delete this token";
			parser.getCompilationUnit().error(token.getPosition(), "Syntax error on token '" + getLexer().getString(token.getPosition()) + "', " + message);
		} else if(token != null && token.getId() == 0) {
			token = getLexer().previousToken();
			if(token.getPosition() != null)
				parser.getCompilationUnit().error(token.getPosition(), "Syntax error on token '" + getLexer().getString(token.getPosition()) + "', unexpected end of file");
		}
	}

	int lex() {
		yylval = getLexer().nextToken();
		return yylval.getId(); 
	}

	int parse(Parser parser) {
		this.parser = parser;

		int nResult = endStack;

		while(true) {
			// endStack:
			if(nResult == endStack) {
				/* push stack */
				if(++ssPos - YYMAXDEPTH > 0) {
					error(); //"pcyacc internal stack overflow"
					return(1);
				}
				statestack[ssPos] = tmpstate;
				++sp;
				s[sp] = yyval;
			}

			// newState:
			n = yypact[tmpstate];
			if (n <= PCYYFLAG) {
				nResult = doDefault();
				if(nResult < endStack)
					return nResult;
				continue; // defaultact; /*  a simple state */
			}

			if(pcyytoken < 0) {
				if((pcyytoken = lex()) < 0)
					pcyytoken = 0;
			}

			if((n += pcyytoken) < 0 || n >= YYLAST) {
				nResult = doDefault();
				if(nResult < endStack)
					return nResult;
				continue; // defaultact;
			}

			if(yychk[n=yyact[n]] == pcyytoken) { 
			/* a shift */
				pcyytoken = -1;
				yyval = yylval;
				tmpstate = n;
				if(pcyyerrfl > 0)
					--pcyyerrfl;
				continue; // enstack;
			}

			nResult = doDefault();

			if(nResult < endStack)
				return nResult;
		}
	}

	int doDefault() {
		if ((n=yydef[tmpstate]) == -2) {
			if (pcyytoken < 0) {
				if((pcyytoken = lex()) < 0)
					pcyytoken = 0;
			}

			for(yyxi = 0; (yyexca[yyxi] != -1) || (yyexca[yyxi + 1] != tmpstate); yyxi += 2) {
			}

			while(yyexca[yyxi += 2] >= 0) {
				if(yyexca[yyxi] == pcyytoken)
					break;
			}

			if((n = yyexca[yyxi + 1]) < 0) /* an accept action */
				return (0);
		}

		if(n == 0) {
			/* error situation */
			switch (pcyyerrfl) {
			case WAS0ERR:          /* an error just occurred */
				error();
				++pcyyerrct;
			case WAS1ERR:
			case WAS2ERR:           /* try again */
				pcyyerrfl = WAS3ERR;
				/* find a state for a legal shift action */
				while (ssPos >= 0) {
					n = yypact[statestack[ssPos]] + YYERRCODE;
					if(n >= 0 && n < YYLAST && yychk[yyact[n]] == YYERRCODE) {
						tmpstate = yyact[n];  /* simulate a shift of "error" */
						return endStack;//break enstack;
					}
					n = yypact[statestack[ssPos]];

					/* the current yyps has no shift on "error", pop stack */
					--ssPos;
					--sp;
				}
				return(1);
			case WAS3ERR:  /* clobber input char */
				if (pcyytoken == 0)
					return 1; /* quit */
				pcyytoken = -1;
				return newState;
			} /* switch */
		} /* if */


		/* reduction, given a production n */
		ssPos -= yyr2[n];
		s1 = sp;
		sp -= yyr2[n];
		yyval = s[sp + 1];
		m = n;
		/* find next state from goto table */
		n = yyr1[n];
		j = yypgo[n] + statestack[ssPos] + 1;
		if(j >= YYLAST || yychk[ tmpstate = yyact[j] ] != -n) 
			tmpstate = yyact[yypgo[n]];

		switch (m) {
			
case 9:
{ parser.onImport(); } break;
case 10:
{ parser.onImportList(true); } break;
case 11:
{ parser.onImportList(false); } break;
case 12:
{ parser.onImportElement(s[s1 - 2], s[s1 - 0]); } break;
case 13:
{ parser.onAttribute(s[s1 - 2], s[s1 - 1], null, s[s1 - 0]); } break;
case 14:
{ parser.onAttribute(s[s1 - 3], s[s1 - 2], s[s1 - 1], s[s1 - 0]); } break;
case 15:
{ parser.onAttribute(s[s1 - 3], s[s1 - 2], s[s1 - 0]); } break;
case 16:
{ parser.onToken(s[s1 - 0]); } break;
case 17:
{ parser.onToken(s[s1 - 0]); } break;
case 18:
{ parser.onToken(s[s1 - 0]); } break;
case 19:
{ parser.onToken(s[s1 - 0]); } break;
case 20:
{ parser.onToken(s[s1 - 0]); } break;
case 21:
{ parser.onToken(s[s1 - 0]); } break;
case 24:
{ parser.onModifiers(true); } break;
case 25:
{ parser.onModifiers(false); } break;
case 26:
{ parser.onQualifiedName(true, s[s1 - 0]); } break;
case 27:
{ parser.onQualifiedName(false, s[s1 - 0]); } break;
case 28:
{ error(s[s1 - 0]); } break;
case 29:
{ parser.startEnum(s[s1 - 0]); } break;
case 30:
{ parser.setEnumName(s[s1 - 0]); } break;
case 33:
{ parser.applyModifiers(); } break;
case 34:
{ error("EnumBody is missing"); } break;
case 36:
{ parser.startEnumBody(s[s1 - 0]); } break;
case 37:
{ parser.addEnumMember(s[s1 - 0]); } break;
case 43:
{ error("'}' expected after this token"); } break;
case 44:
{ parser.finishEnumBody(s[s1 - 0]); } break;
case 45:
{ parser.startClass(null, s[s1 - 0]); } break;
case 46:
{ parser.startClass(s[s1 - 1], s[s1 - 0]); } break;
case 47:
{ parser.setClassName(s[s1 - 0]); } break;
case 49:
{ parser.setClassBase(); } break;
case 54:
{ parser.applyModifiers(); } break;
case 55:
{ parser.finishClass(); } break;
case 56:
{ parser.finishClass(); } break;
case 57:
{ parser.startClassBody(s[s1 - 0]); } break;
case 60:
{ parser.finishClassBody(s[s1 - 0]); } break;
case 62:
{ parser.applyModifiers(); } break;
case 64:
{ parser.applyModifiers(); } break;
case 66:
{ parser.applyModifiers(); } break;
case 68:
{ parser.applyModifiers(); } break;
case 69:
{ parser.addClassMember(); } break;
case 72:
{ parser.onMissingSemicolon();} break;
case 73:
{ parser.onMissingSemicolon();} break;
case 74:
{ parser.onMissingSemicolon();} break;
case 75:
{ parser.onMissingSemicolon();} break;
case 76:
{ parser.onMissingSemicolon();} break;
case 81:
{ parser.startRecords(s[s1 - 0]); } break;
case 82:
{ parser.finishRecords(); } break;
case 83:
{ parser.startRecordsBody(s[s1 - 0]); } break;
case 86:
{ parser.finishRecordsBody(s[s1 - 0]); } break;
case 87:
{ parser.startRecord(s[s1 - 0]); } break;
case 88:
{ parser.setRecordValue(s[s1 - 0]); } break;
case 90:
{ parser.applyModifiers(); } break;
case 91:
{ parser.addRecord(); } break;
case 94:
{ parser.onVariableType(false); } break;
case 95:
{ parser.onVariableType(true); } break;
case 99:
{ error(s[s1 - 0]); } break;
case 100:
{ parser.onVariableDeclarator(s[s1 - 0]); } break;
case 101:
{ parser.onVariableDeclarator(s[s1 - 2], s[s1 - 0]); } break;
case 103:
{ parser.onVariableDeclaratorInit(s[s1 - 1]); } break;
case 104:
{ parser.onVariableInit(null); } break;
case 105:
{ parser.onVariableInit(s[s1 - 1]); } break;
case 106:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onVariableInit(s[s1 - 1]); } break;
case 107:
{ parser.createMethod(s[s1 - 1]); } break;
case 108:
{ parser.createPriorityOperator(s[s1 - 1]); } break;
case 109:
{ parser.createCastOperator(s[s1 - 2], s[s1 - 1]); } break;
case 110:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 111:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 112:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 113:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 114:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 115:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 116:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 117:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 118:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 119:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 120:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 121:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 122:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 123:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 124:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 125:
{ parser.setMethodBody(); } break;
case 127:
{ parser.createParameter(); } break;
case 130:
{ parser.startParameters(s[s1 - 0]); } break;
case 131:
{ parser.finishParameters(s[s1 - 0]); } break;
case 132:
{ parser.finishParameters(s[s1 - 0]); } break;
case 136:
{ parser.startArrayInitializer(s[s1 - 0]); } break;
case 138:
{ parser.finishArrayInitializer(s[s1 - 0]); } break;
case 139:
{ parser.finishArrayInitializer(s[s1 - 0]); } break;
case 142:
{ parser.addArrayInitializer(); } break;
case 143:
{ parser.addArrayInitializer(); } break;
case 144:
{ parser.addArrayInitializer(); } break;
case 145:
{ parser.onMapElement(s[s1 - 4], s[s1 - 0]); } break;
case 146:
{ parser.onMapElement(s[s1 - 4], s[s1 - 0]); } break;
case 147:
{ parser.startCompound(s[s1 - 0]); } break;
case 148:
{ parser.finishCompound(s[s1 - 0]); } break;
case 149:
{ parser.finishCompound(s[s1 - 0]); } break;
case 150:
{ parser.addStatement(); } break;
case 151:
{ parser.addStatement(); } break;
case 152:
{ parser.onDeclarator(); } break;
case 155:
{ parser.onStatement(); } break;
case 156:
{ parser.onStatement(); } break;
case 157:
{ parser.onStatement2(); } break;
case 158:
{ parser.onStatement2(); } break;
case 163:
{ parser.onStatement1(); } break;
case 164:
{ parser.onStatement1(); } break;
case 165:
{ parser.onStatement1(); } break;
case 166:
{ parser.onStatement1(); } break;
case 167:
{ parser.onStatement1(); } break;
case 168:
{ parser.onStatement1(); } break;
case 169:
{ parser.onStatement1(); } break;
case 170:
{ parser.onStatement1(); } break;
case 171:
{ parser.onStatement1(); } break;
case 172:
{ parser.onStatement1(); } break;
case 173:
{ parser.onStatement1(); } break;
case 174:
{ parser.onThrowStatement(s[s1 - 2]); } break;
case 175:
{ parser.onTryStatement(s[s1 - 1]); } break;
case 176:
{ parser.onCatchClause(s[s1 - 4]); } break;
case 177:
{ parser.onFinallyStatement(s[s1 - 1]); } break;
case 178:
{ parser.addCatchStatement(); } break;
case 179:
{ parser.addCatchStatement(); } break;
case 183:
{ parser.onIfStatement(s[s1 - 2], null); } break;
case 184:
{ parser.onIfStatement(s[s1 - 4], s[s1 - 1]); } break;
case 185:
{ parser.onWhileStatement(s[s1 - 2]); } break;
case 186:
{ parser.onDoWhileStatement(s[s1 - 4], s[s1 - 2]); } break;
case 187:
{ parser.onDeclarator(); } break;
case 189:
{ parser.onDeclarator(); } break;
case 190:
{ parser.onForStatement(s[s1 - 7], false); } break;
case 191:
{ parser.onForStatement(s[s1 - 8], true); } break;
case 192:
{ parser.onForEachStatement(s[s1 - 6]); } break;
case 196:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 197:
{ parser.onJumpStatement(s[s1 - 2], true); } break;
case 198:
{ parser.onJumpStatement(s[s1 - 2], true); } break;
case 199:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 200:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 202:
{ parser.onAssignment(s[s1 - 1]); } break;
case 203:
{ parser.onAssignment(s[s1 - 1]); } break;
case 204:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 205:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 206:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 207:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 208:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 210:
{ parser.onInstanceOf(s[s1 - 1]); } break;
case 212:
{ parser.onTernaryOperator(s[s1 - 3], s[s1 - 1]); } break;
case 213:
{ parser.onElvisOperator(s[s1 - 1]); } break;
case 214:
{ parser.onElvisOperator(s[s1 - 1]); } break;
case 216:
{ parser.onOperator(s[s1 - 1]); } break;
case 218:
{ parser.onOperator(s[s1 - 1]); } break;
case 220:
{ parser.onOperator(s[s1 - 1]); } break;
case 221:
{ parser.onOperator(s[s1 - 1]); } break;
case 223:
{ parser.onNull(s[s1 - 0]); } break;
case 224:
{ parser.onOperator(s[s1 - 1]); } break;
case 225:
{ parser.onOperator(s[s1 - 1]); } break;
case 226:
{ parser.onOperator(s[s1 - 1]); } break;
case 227:
{ parser.onOperator(s[s1 - 1]); } break;
case 229:
{ parser.onOperator(s[s1 - 1]); } break;
case 230:
{ parser.onOperator(s[s1 - 1]); } break;
case 232:
{ parser.onOperator(s[s1 - 1]); } break;
case 233:
{ parser.onOperator(s[s1 - 1]); } break;
case 234:
{ parser.onOperator(s[s1 - 1]); } break;
case 237:
{ parser.onUnary(s[s1 - 1]); } break;
case 238:
{ parser.onUnary(s[s1 - 1]); } break;
case 239:
{ parser.onTypeCast(); } break;
case 240:
{ parser.onArrayTypeCast(); } break;
case 241:
{ parser.onNewExpression(s[s1 - 1], s[s1 - 0]); } break;
case 242:
{ parser.onContainer(s[s1 - 0]); } break;
case 243:
{ parser.addContainer(s[s1 - 0]); } break;
case 244:
{ parser.onBracedExpression(s[s1 - 2], s[s1 - 0]); } break;
case 246:
{ parser.onThis(s[s1 - 0]); } break;
case 247:
{ parser.onSuper(s[s1 - 0]); } break;
case 248:
{ parser.onConstant(s[s1 - 0]); } break;
case 250:
{ parser.onTypeToPostfix(); } break;
case 251:
{ parser.onTypeToPostfix(); } break;
case 252:
{ parser.onMethodCall(false); } break;
case 254:
{ parser.onIndex(s[s1 - 1], s[s1 - 0], false); } break;
case 255:
{ parser.onIndex(s[s1 - 2], s[s1 - 0], true); } break;
case 256:
{ parser.onIndices(true); } break;
case 257:
{ parser.onIndices(false); } break;
case 260:
{ parser.onPostfix(); } break;
case 261:
{ parser.onMethodCall(true); } break;
case 262:
{ error(s[s1 - 0]); } break;
case 263:
{ parser.onArrayAccess(); } break;
case 264:
{ parser.onPostfix(); } break;
case 265:
{ parser.onMethodCall(true); } break;
case 266:
{ error(s[s1 - 0]); } break;
case 268:
{ parser.startExpressions(s[s1 - 0]); } break;
case 269:
{ parser.finishExpressions(s[s1 - 0]); } break;
case 270:
{ parser.finishExpressions(s[s1 - 0]); } break;
case 271:
{ parser.addExpression(); } break;
case 272:
{ parser.addExpression(); } break;
case 273:
{ parser.addExpression(); } break;
case 274:
{ parser.addExpression(); } break;
		}
		return endStack;
	}
}