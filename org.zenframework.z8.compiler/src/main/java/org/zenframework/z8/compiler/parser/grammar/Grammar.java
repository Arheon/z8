
package org.zenframework.z8.compiler.parser.grammar;

//import org.zenframework.z8.compiler.core.ILanguageElement;
import org.zenframework.z8.compiler.core.IPosition;
import org.zenframework.z8.compiler.core.IToken;
import org.zenframework.z8.compiler.parser.grammar.lexer.Lexer;
import org.zenframework.z8.compiler.parser.grammar.lexer.token.Token;

public class Grammar
{
int WHITESPACE = 257;
int LINEBREAK = 258;
int COMMENT = 259;
int NOT = 260;
int MUL = 261;
int DIV = 262;
int MOD = 263;
int ADD = 264;
int SUB = 265;
int EQU = 266;
int NOT_EQU = 267;
int LESS = 268;
int MORE = 269;
int LESS_EQU = 270;
int MORE_EQU = 271;
int AND = 272;
int OR = 273;
int GROUP = 274;
int ADD_ASSIGN = 275;
int SUB_ASSIGN = 276;
int MUL_ASSIGN = 277;
int DIV_ASSIGN = 278;
int MOD_ASSIGN = 279;
int LBRACE = 280;
int RBRACE = 281;
int LBRACKET = 282;
int RBRACKET = 283;
int LCBRACE = 284;
int RCBRACE = 285;
int BRACKETS = 286;
int COLON = 287;
int SEMICOLON = 288;
int ASSIGN = 289;
int QUESTION = 290;
int COMMA = 291;
int ELVIS = 292;
int DOT = 293;
int CONSTANT = 294;
int IDENTIFIER = 295;
int OPERATOR = 296;
int IF = 297;
int ELSE = 298;
int DO = 299;
int FOR = 300;
int WHILE = 301;
int BREAK = 302;
int RETURN = 303;
int CONTINUE = 304;
int THIS = 305;
int SUPER = 306;
int CONTAINER = 307;
int NULL = 308;
int IMPORT = 309;
int CLASS = 310;
int PUBLIC = 311;
int PROTECTED = 312;
int PRIVATE = 313;
int EXTENDS = 314;
int ENUM = 315;
int RECORDS = 316;
int AUTO = 317;
int NEW = 318;
int STATIC = 319;
int TRY = 320;
int CATCH = 321;
int FINALLY = 322;
int THROW = 323;
int VIRTUAL = 324;
int FINAL = 325;
int INSTANCE_OF = 326;
int YYERRCODE = 256;

int yyexca[] = {
  -1, 1,
  0, -1,
  -2, 0,
  -1, 71,
  295, 94,
  296, 94,
  -2, 104,
  -1, 234,
  295, 96,
  -2, 248,
  -1, 235,
  295, 97,
  -2, 249,
  0,
};

int YYNPROD = 273;
int YYLAST = 1259;
int yyact[] = {
     108,     159,      35,     261,      70,      48,     109,     323,
     324,     292,      53,       9,      99,      30,     387,     263,
     107,      35,     142,     401,     113,      35,     306,     148,
     149,     211,     243,      84,     265,      56,     195,     223,
      78,     232,     233,     231,     102,     222,     153,      79,
     100,     101,      24,      26,      25,      80,     190,      78,
      28,      35,      27,     117,      54,     151,     230,      29,
     113,     219,     116,      79,     185,     287,      79,      79,
      52,      80,     220,      79,      80,      80,     178,      35,
      50,      80,     392,     181,      65,     147,     156,      79,
     401,     105,     106,     112,      96,      80,      22,     401,
     329,     330,     331,     332,     333,      55,     116,     138,
      65,     189,      56,      65,      65,      23,     328,      66,
     129,     347,     176,     133,     138,      30,      56,     136,
     416,     189,     162,     138,     208,     410,     138,     176,
     182,      89,      35,      76,      79,     135,      56,     297,
      79,      56,      80,     160,     409,     161,      80,     366,
     138,     397,      24,      26,      25,     367,     234,      77,
      28,     369,      27,      56,     235,     404,     385,      29,
      78,      79,     221,     370,     113,     264,     384,      80,
     267,     129,     364,     113,     102,     129,     375,     343,
     100,     101,     213,     142,     363,     372,     371,     140,
     345,     178,      35,     339,     186,     338,     194,     193,
     113,     192,     191,     365,     105,     106,     112,     236,
     388,      81,      57,     141,     142,     185,     178,      35,
     198,     116,     198,     198,      39,     205,     146,      43,
     234,     105,     106,     112,      96,     234,     235,     303,
     158,     157,     138,     235,     221,     420,     116,     417,
     413,     221,     412,     269,     270,      78,     407,     297,
     373,     234,      99,     108,     153,     343,     314,     235,
     334,     163,     109,     139,     214,     221,     164,     165,
     341,     170,     171,     294,      93,     133,     240,     300,
     102,     322,      69,      12,     100,     101,     172,     173,
     174,     138,     238,      36,     207,     373,     299,      59,
     160,      46,      83,       5,     113,     137,     199,      32,
     142,     188,     321,       6,     312,     216,     327,     187,
      33,      92,     178,      35,     110,     223,     336,     232,
     233,     231,     228,     227,     229,     105,     106,     112,
      96,     103,      12,      32,       5,     104,     211,     134,
     114,     111,     116,     212,     230,       6,     215,     219,
      91,      78,     170,     171,     305,     132,     166,     167,
     168,     169,     118,      90,     226,     389,     209,     234,
     161,     184,      14,     225,     343,     235,     234,       3,
     234,     224,      31,     221,     235,     342,     235,     231,
      45,      68,     221,     217,     221,     218,     387,     207,
     141,     370,     293,     368,      79,     291,     184,     219,
     264,     391,      80,     152,     262,      72,      79,       3,
      74,     396,     400,     393,      80,     390,     309,     317,
      14,     239,     242,     237,     183,     144,      59,      69,
      63,      16,     227,     376,     378,     379,     380,     381,
     382,     340,     234,     296,     402,      70,     292,      44,
     235,     263,     210,     175,     201,     145,     221,     143,
     273,     410,     234,     107,     131,     234,     232,     221,
     235,      73,      60,     235,     222,     221,     221,     266,
     394,     221,     294,     328,     415,     398,      16,      64,
     271,     416,     418,     329,     211,     330,     331,     332,
     333,     365,      58,     383,     272,     201,     122,     403,
     310,     318,     386,     334,      44,     367,     328,     295,
     405,     388,      37,     301,     302,     286,     397,     411,
     404,      38,     289,     197,     326,     131,     220,     137,
     212,     115,      10,      97,      15,      68,      85,     134,
     230,      47,      51,      34,      41,      82,     175,     374,
     346,      42,     320,      40,     341,     325,      61,     401,
     344,      11,     337,      49,      17,      19,      20,     324,
       4,       8,     183,      63,      38,      44,     408,       7,
      71,      44,       2,       1,       0,     417,      93,       0,
     313,      86,     311,     319,       0,     175,     419,       0,
     420,     421,     208,       0,      71,      83,       0,      71,
      71,     407,     307,     315,      71,       0,     184,       0,
     102,     152,      95,     212,     100,     101,       0,       0,
     155,       0,      92,     214,     121,     125,       0,       0,
      58,       0,      36,       0,     113,       0,     370,       0,
     142,     304,     414,     181,     227,      18,     110,       0,
     322,     213,     178,      35,       0,     223,      30,     232,
     233,     231,     228,     227,     229,     105,     106,     112,
      96,     240,       0,      35,      76,      71,     216,     377,
     321,      71,     116,     238,     230,       0,       0,     219,
     235,      78,       0,      24,      26,      25,     308,     316,
      62,      28,       0,      27,      61,     212,     212,      30,
      29,      78,     155,      44,       0,     115,     215,       0,
       0,     268,     212,       0,       0,       0,     295,     102,
       0,     399,     209,     100,     101,       0,     280,     281,
     367,       0,     285,      22,      24,      26,      25,     288,
      21,       0,      28,     113,      27,       0,       0,     142,
     206,      29,      23,       0,     406,       0,     397,       0,
       0,     178,      35,       0,     223,     199,     232,     233,
     231,     228,     227,     229,     105,     106,     112,      96,
     102,       0,       0,       0,     100,     101,       0,      94,
       0,     116,       0,     230,       0,      62,     219,       0,
      78,       0,       0,     200,     113,     200,     200,     212,
     142,     276,     277,     278,     279,       0,       0,     210,
       0,       0,     178,      35,       0,     223,       0,     232,
     233,     231,     228,     227,     229,     105,     106,     112,
      96,       0,       0,       0,       0,      30,     176,       0,
       0,     196,     116,     119,     230,       0,       0,     219,
       0,      78,      35,      76,     171,      97,      30,     181,
       0,       0,     363,     120,     126,       0,       0,      30,
       0,       0,      24,      26,      25,     124,      18,       0,
      28,      30,      27,       0,      35,       0,       0,      29,
      78,       9,      22,      24,      26,      25,      35,      21,
       0,      28,       0,      27,      24,      26,      25,       0,
      29,      23,      28,       0,      27,       0,      24,      26,
      25,      29,      78,     102,      28,       0,      27,     100,
     101,       0,       0,      29,      78,       0,      62,     167,
     168,     169,      95,       0,      62,       0,       0,     296,
       0,       0,       0,     185,     395,     155,       0,     150,
       0,       0,       0,       0,     102,     178,      35,     155,
     100,     101,     102,       0,       0,       0,     100,     101,
     105,     106,     112,      96,     274,     275,       0,       0,
     113,       0,       0,       0,     185,     116,     113,     298,
     335,       0,     185,       0,       0,       0,     178,      35,
       0,     202,     203,       0,     178,      35,       0,       0,
       0,     105,     106,     112,      96,       0,       0,     105,
     106,     112,      96,     102,       0,       0,     116,     100,
     101,     102,       0,       0,     116,     100,     101,       0,
       0,       0,       0,       0,       0,       0,       0,     296,
      67,       0,       0,     185,     290,     113,       0,       0,
       0,     185,      98,       0,       0,     178,      35,       0,
       0,       0,     102,     178,      35,       0,     100,     101,
     105,     106,     112,      96,     136,     196,     105,     106,
     112,      96,       0,     102,       0,     116,     113,     100,
     101,     204,       0,     116,       0,       0,       0,       0,
       0,       0,     165,      94,     178,      35,       0,     113,
       0,     102,      87,       0,       0,     100,     101,     105,
     106,     112,      96,     130,     244,      88,      35,     260,
       0,       0,     102,       0,     116,     113,     100,     101,
     105,     106,     112,      96,       0,       0,       0,       0,
      13,       0,       0,     178,      35,     116,     113,       0,
       0,       0,       0,       0,       0,       0,     105,     106,
     112,      96,       0,       0,     178,      35,       0,     177,
     179,     180,       0,     116,       0,       0,       0,     105,
     106,     112,       0,       0,     130,       0,       0,      66,
     130,       0,       0,      67,     116,     245,     246,     247,
     248,     249,     250,     251,     252,     253,     254,     255,
     256,     257,     258,      66,       0,       0,     123,     127,
       0,       0,       0,      61,       0,       0,       0,     128,
       0,       0,     259,       0,     151,     348,     349,     350,
     351,     352,     353,     354,     355,     356,     357,     358,
     359,     360,     361,     362,     245,       0,       0,     282,
     283,     284,       0,       0,     101,       0,     102,     172,
       0,       0,       0,       0,       0,       0,      75,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,      62,       0,       0,       0,
     145,       0,      75,       0,       0,      75,       0,       0,
       0,       0,      75,       0,       0,       0,       0,       0,
       0,       0,     241,     128,       0,       0,     154,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,     246,     247,     248,     249,
     250,     251,     252,     253,     254,     255,     256,     257,
     258,     259,     150,      75,       0,       0,       0,       0,
       0,       0,       0,       0,       0,     173,     174,      98,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,     123,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,     241,       0,
       0,       0,      13,
};

int yypact[] = {
     484,   -1000,     349,     349,    -298,   -1000,   -1000,   -1000,
   -1000,    -274,     -80,     -77,   -1000,     349,   -1000,    -309,
   -1000,    -223,    -231,   -1000,   -1000,   -1000,   -1000,    -300,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,    -243,     349,
   -1000,   -1000,    -195,   -1000,   -1000,     -91,    -173,   -1000,
   -1000,     -92,    -268,   -1000,   -1000,   -1000,   -1000,    -274,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,     703,   -1000,
    -244,   -1000,    -173,   -1000,   -1000,     467,     493,   -1000,
   -1000,   -1000,    -173,   -1000,   -1000,   -1000,    -182,    -164,
    -113,     -78,    -216,    -272,    -242,   -1000,    -274,   -1000,
   -1000,   -1000,    -213,   -1000,   -1000,   -1000,    -264,   -1000,
     -66,     -67,    -325,    -159,     -31,   -1000,     -20,      58,
   -1000,       1,   -1000,    -174,     742,     742,     742,   -1000,
    -218,   -1000,   -1000,    -117,   -1000,     -87,   -1000,   -1000,
   -1000,     725,   -1000,    -167,    -249,   -1000,   -1000,   -1000,
    -102,    -103,   -1000,     308,   -1000,    -105,    -106,     503,
    -265,   -1000,   -1000,   -1000,   -1000,    -224,     -64,    -224,
    -224,   -1000,     686,   -1000,   -1000,     387,   -1000,   -1000,
     -94,    -269,   -1000,   -1000,     -44,     801,   -1000,     -44,
    -278,   -1000,    -267,    -146,    -268,   -1000,   -1000,    -274,
     725,     653,     725,     725,     725,     725,     742,     742,
     742,     742,     742,     742,     742,     742,     742,     -64,
    -274,   -1000,   -1000,   -1000,   -1000,    -246,    -174,   -1000,
     647,   -1000,     -50,   -1000,     598,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
     -80,   -1000,   -1000,   -1000,   -1000,     -68,   -1000,     292,
   -1000,   -1000,   -1000,    -266,      -4,   -1000,   -1000,   -1000,
   -1000,    -314,    -314,     725,   -1000,    -187,   -1000,    -260,
   -1000,   -1000,   -1000,     592,    -107,    -109,     -88,    -260,
     436,     -43,   -1000,     -87,   -1000,    -269,   -1000,    -112,
   -1000,    -269,    -184,   -1000,   -1000,     -44,     -44,     -44,
     -44,     -44,     -44,     -44,     -44,     -44,     -44,     -44,
     -44,     -44,     -44,     -44,   -1000,   -1000,    -119,   -1000,
   -1000,   -1000,   -1000,   -1000,    -264,    -100,   -1000,   -1000,
     -31,   -1000,   -1000,   -1000,     -15,     -15,     -15,     -15,
       1,       1,   -1000,   -1000,   -1000,    -183,   -1000,   -1000,
    -183,   -1000,   -1000,    -150,   -1000,   -1000,   -1000,   -1000,
     725,   -1000,   -1000,    -136,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,    -114,    -115,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,     -48,     -88,   -1000,   -1000,    -122,
     653,     725,     725,     725,     725,     725,     436,   -1000,
    -130,    -138,   -1000,   -1000,   -1000,     436,    -287,     -96,
   -1000,   -1000,   -1000,    -220,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,    -293,   -1000,     725,   -1000,     559,
    -154,   -1000,     653,   -1000,   -1000,    -293,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,    -279,
   -1000,   -1000,   -1000,    -260,     725,    -139,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,     653,   -1000,   -1000,
     -51,     436,    -156,    -171,     725,     -55,     -57,     -88,
   -1000,   -1000,     725,    -176,   -1000,   -1000,   -1000,     -58,
     725,     436,     -60,   -1000,     436,   -1000,
};

int yypgo[] = {
       0,     523,     522,     343,     275,     519,     513,     512,
     283,     481,     510,      66,     509,     393,    1016,     508,
     507,     338,     505,     499,     497,     274,     493,     492,
     581,     490,     489,     486,     484,     259,     482,     267,
     475,     473,     466,     450,     502,      37,     709,     928,
     392,     353,     439,     258,     271,     426,     425,     415,
     413,     389,     387,     386,     254,     385,     266,       0,
       6,     311,    1087,       4,     376,     753,     373,     847,
     170,      15,     372,     371,     278,     366,     365,       9,
     362,     360,     359,     116,     315,     334,     410,      25,
     244,     318,     285,     357,     282,     257,     355,      16,
     345,     339,     333,     332,      12,     331,     320,     289,
     252,     703,     554,     483,     938,     313,     312,     309,
     305,     292,     277,     287,     281,     270,
};

int yyr1[] = {
       0,       1,       1,       1,       1,       3,       3,       4,
       4,       2,       7,       7,       8,      10,      10,      10,
      12,      12,      12,      12,      12,      12,      13,      13,
      14,      14,       9,       9,       9,      15,      16,      17,
      18,      18,       6,       6,      20,      21,      22,      22,
      22,      23,      23,      19,      19,      24,      24,      25,
      26,      27,      28,      29,      29,      30,      30,       5,
      32,      33,      34,      34,      31,      36,      36,      38,
      38,      40,      40,      42,      42,      44,      45,      45,
      45,      45,      45,      45,      45,      45,      45,      35,
      35,      46,      43,      48,      49,      49,      47,      51,
      52,      53,      53,      54,      50,      50,      55,      56,
      58,      58,      59,      59,      60,      60,      37,      37,
      39,      39,      39,      62,      62,      62,      62,      62,
      62,      62,      62,      62,      62,      62,      62,      62,
      62,      62,      62,      62,      62,      41,      41,      65,
      66,      66,      67,      63,      63,      61,      61,      61,
      69,      68,      68,      68,      70,      70,      71,      71,
      71,      72,      72,      73,      64,      64,      74,      74,
      76,      75,      75,      75,      75,      75,      75,      75,
      75,      75,      75,      75,      75,      75,      75,      75,
      75,      75,      75,      75,      75,      75,      78,      83,
      84,      85,      86,      86,      77,      77,      77,      80,
      80,      88,      89,      90,      90,      91,      91,      81,
      81,      81,      82,      82,      82,      82,      82,      79,
      79,      79,      79,      79,      79,      79,      79,      11,
      11,      93,      93,      93,      93,      94,      94,      95,
      95,      96,      96,      96,      97,      97,      97,      97,
      97,      97,      98,      98,      98,      99,      99,      99,
      99,     100,     100,     100,     100,     101,     101,     102,
     103,     103,      87,      87,     104,     104,     104,     104,
     104,     104,     104,     104,     106,     106,      57,      57,
      92,      92,      92,      92,      92,      92,      92,      92,
      92,     105,     108,     107,     107,     109,     109,     109,
     109,
};

int yyr2[] = {
       2,       0,       1,       1,       2,       1,       2,       1,
       1,       1,       1,       2,       3,       3,       4,       4,
       1,       1,       1,       1,       1,       1,       1,       1,
       1,       2,       1,       3,       2,       1,       1,       2,
       1,       2,       1,       2,       1,       1,       1,       3,
       2,       1,       2,       1,       2,       1,       2,       1,
       1,       1,       2,       1,       3,       1,       2,       2,
       2,       1,       1,       2,       2,       1,       2,       1,
       2,       1,       2,       1,       2,       1,       2,       2,
       3,       3,       3,       3,       2,       1,       1,       1,
       2,       1,       2,       1,       1,       2,       2,       1,
       3,       1,       2,       2,       1,       2,       1,       2,
       1,       1,       1,       2,       2,       3,       1,       3,
       1,       3,       3,       3,       2,       3,       4,       4,
       4,       4,       4,       4,       4,       4,       4,       4,
       4,       4,       4,       4,       4,       2,       2,       1,
       1,       3,       1,       2,       3,       1,       1,       1,
       1,       2,       3,       4,       1,       3,       1,       1,
       1,       5,       5,       1,       2,       3,       1,       2,
       1,       1,       1,       2,       2,       3,       3,       1,
       1,       1,       1,       2,       2,       2,       2,       2,
       2,       2,       2,       2,       2,       2,       3,       2,
       5,       2,       2,       2,       1,       2,       2,       3,
       5,       3,       5,       1,       1,       8,       9,       1,
       1,       1,       2,       3,       3,       2,       2,       1,
       3,       3,       3,       3,       3,       3,       3,       1,
       3,       1,       5,       3,       3,       1,       3,       1,
       3,       1,       3,       3,       1,       1,       3,       3,
       3,       3,       1,       3,       3,       1,       3,       3,
       3,       1,       2,       2,       2,       2,       2,       2,
       1,       3,       3,       1,       1,       1,       1,       1,
       1,       1,       1,       1,       2,       3,       1,       2,
       1,       1,       3,       3,       2,       2,       3,       3,
       2,       2,       1,       2,       3,       1,       1,       3,
       3,
};

int yychk[] = {
   -1000,      -1,      -2,      -3,      -7,      -4,      -8,      -5,
      -6,     309,     -30,     -18,     -29,     -14,     -17,     -28,
     -13,     -15,     -24,     -12,     -10,     315,     310,     325,
     311,     313,     312,     319,     317,     324,     282,      -3,
      -4,      -8,      -9,     295,     -31,     -34,     -33,     284,
     -19,     -23,     -20,     284,     -13,     -17,     -29,     -26,
     314,     -16,     295,     -25,     295,     310,     295,     288,
     293,     285,     -35,     -44,     -45,     -36,     -38,     -40,
     -42,     -37,     -14,     -39,     -41,     -43,     -59,      -9,
     -62,     -46,     -60,     -58,     296,     316,     325,     -55,
     -56,     285,     -22,     -21,     295,     -27,      -9,     283,
     294,     -11,     -93,     -94,     -95,     -96,     -97,     -98,
     308,     -99,    -100,     -92,     264,     265,     260,    -104,
    -103,     305,     306,     -87,     -55,     -56,    -105,    -101,
     307,     280,    -102,      -9,     318,     295,     -44,     288,
     -38,     -36,     -40,     -14,     288,     -36,     -38,     -14,
     -58,     -37,     -39,     -41,     -43,     289,     -57,     289,
     275,    -106,     282,     -64,     288,     -73,     284,     -47,
     -49,     -48,     284,     293,     295,     296,     -63,     295,
     -67,     280,     -58,      -9,     291,     283,     283,     326,
     290,     292,     273,     272,     266,     267,     268,     269,
     270,     271,     264,     265,     261,     262,     263,     -57,
     293,    -100,     294,    -100,    -100,     293,     -92,     -68,
     -69,     284,     -11,    -107,    -108,     280,     295,     288,
     288,     288,     288,     295,     -61,     -32,     -11,     -68,
     -24,    -106,     -61,     -61,     283,     -11,     285,     -74,
     -75,     -77,     -78,     -79,     -76,     -64,     -80,     -81,
     -82,     -86,     -83,     323,     -11,     -92,     -37,     297,
     -88,     -89,     -91,     303,     302,     304,     320,     301,
     299,     300,     -55,     -56,     285,     -50,     -54,     -53,
     -52,     -14,     -51,     295,     -63,     260,     261,     262,
     263,     264,     265,     266,     267,     268,     269,     270,
     271,     272,     273,     289,     -63,     281,     -66,     -65,
     -59,     295,     -21,     -55,      -9,     -11,     -11,     -68,
     -95,     -96,     -97,     -97,     -98,     -98,     -98,     -98,
     -99,     -99,    -100,    -100,    -100,      -9,    -105,     307,
      -9,    -105,     285,     -70,     -71,     -72,     -11,     -68,
     280,     281,     281,    -109,     -11,     -68,     -31,     283,
     285,     -75,     288,     -77,     -78,     -64,     -80,     -81,
     288,     -76,     -79,     -77,     -78,     -64,     -80,     -81,
     -82,     -84,     -85,     321,     322,     -84,     -85,     -11,
     289,     275,     276,     277,     278,     279,     -87,     288,
     -11,     -68,     288,     288,     -64,     -87,     -75,     280,
     -54,     288,     -52,     289,     -63,     -63,     -63,     -63,
     -63,     -63,     -63,     -63,     -63,     -63,     -63,     -63,
     -63,     -63,     -63,     291,     281,     287,     285,     291,
     -11,     281,     291,     288,     288,     280,     -64,     288,
     -11,     -68,     -11,     -11,     -11,     -11,     -11,     -75,
     288,     288,     -75,     301,     288,     -90,     -37,     -79,
     294,     -65,     -11,     285,     -71,     291,     -11,     -68,
     -59,     298,     -87,     -11,     288,     -11,     -68,     281,
     -75,     288,     288,     -11,     281,     281,     -64,     -79,
     288,     281,     -79,     -75,     281,     -75,
};

int yydef[] = {
       1,      -2,       2,       3,       9,       5,      10,       7,
       8,       0,       0,      34,      53,       0,      32,      51,
      24,       0,       0,      22,      23,      29,      45,       0,
      16,      17,      18,      19,      20,      21,       0,       4,
       6,      11,       0,      26,      55,       0,      58,      57,
      35,      43,      41,      36,      25,      33,      54,       0,
      48,      31,      30,      50,      47,      46,       0,      12,
      28,      60,      59,      79,      69,       0,       0,      77,
      78,      61,       0,      63,      65,      67,     102,      -2,
       0,       0,      98,       0,       0,      81,       0,      96,
      97,      44,      42,      38,      37,      52,      49,      13,
     246,       0,     207,     209,     213,     215,     217,     220,
     221,     226,     229,     233,       0,       0,       0,     256,
     257,     244,     245,     247,     248,     249,     250,     251,
     240,       0,     243,      94,       0,      27,      80,      70,
       0,       0,      76,       0,      71,       0,       0,       0,
       0,      62,      64,      66,      68,       0,      95,       0,
       0,     254,       0,     125,     126,       0,     147,      82,
       0,      84,      83,      99,     100,       0,     108,       0,
       0,     130,       0,      94,      40,      14,      15,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,     261,
     264,     234,     246,     235,     236,     260,     237,     238,
       0,     136,       0,     265,       0,     266,     239,      72,
      73,      74,      75,     100,     103,     133,     134,     135,
       0,     255,     105,     106,     252,       0,     148,       0,
     150,     153,     154,       0,       0,     159,     160,     161,
     162,     180,       0,       0,     199,     233,     152,       0,
     191,     192,     193,       0,       0,       0,       0,       0,
       0,       0,      -2,      -2,      86,      85,      92,       0,
      89,       0,       0,      87,     107,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,     109,     131,       0,     128,
     127,     101,      39,     208,      94,       0,     211,     212,
     214,     216,     218,     219,     222,     223,     224,     225,
     227,     228,     230,     231,     232,     262,     263,     241,
     258,     259,     137,       0,     140,     142,     143,     144,
       0,     242,     267,       0,     269,     270,      56,     253,
     149,     151,     155,     163,     164,     165,     166,     167,
     156,       0,       0,     168,     169,     170,     171,     172,
     173,     179,     182,       0,       0,     178,     181,       0,
       0,       0,       0,       0,       0,       0,       0,     194,
       0,       0,     197,     198,     175,       0,       0,       0,
      93,      91,      90,       0,     110,     111,     112,     113,
     114,     115,     116,     117,     118,     119,     120,     121,
     122,     123,     124,       0,     132,       0,     138,       0,
       0,     268,       0,     157,     158,       0,     177,     174,
     200,     201,     202,     203,     204,     205,     206,     183,
     195,     196,     185,       0,       0,       0,     187,     188,
      88,     129,     210,     139,     141,       0,     271,     272,
       0,       0,       0,       0,       0,       0,       0,       0,
     184,     186,       0,       0,     145,     146,     176,       0,
       0,       0,       0,     189,       0,     190,
};

	int yyxi;

	final int endStack = 100;
	final int newState = 101;

	final int YYMAXDEPTH = 200;
	final int YYREDMAX  = 1000;
	final int PCYYFLAG = -1000;
	final int WAS0ERR = 0;
	final int WAS1ERR = 1;
	final int WAS2ERR = 2;
	final int WAS3ERR = 3;

	Token yylval = new Token();
	Token yyval = new Token();

	Token[] s = new Token[YYMAXDEPTH];     /* value stack */
	int pcyyerrfl = 0;           /* error flag */
	int pcyyerrct = 0;           /* error count */
	
	int[] redseq = new int[YYREDMAX];
	int redcnt = 0;
	int pcyytoken = -1;          /* input token */

	int[] statestack = new int[YYMAXDEPTH]; /* state stack */
	int j, m;              /* working index */
	int s1;
	int tmpstate = 0, tmptoken = -1, n;

	int ssPos = -1;
	int sp = -1;

	Parser parser;

	Lexer getLexer() {
		return parser.getLexer();
	}

	void recover() {
		if(yylval.getId() != 0) {
			pcyytoken = -1;
			pcyyerrfl = WAS0ERR;
		}
	}

	void error(IPosition position, String message) {
		parser.getCompilationUnit().error(position, message);
	}

	void error() {
		error(yylval);
	}

	void error(IToken token) {
		error(token, null);
	}

	void error(String message) {
		error(getLexer().previousToken(), message);
	}

	void error(IToken token, String message) {
		if(token != null && token.getPosition() != null) { // empty or fully commented file
			message = message != null ? message : "delete this token";
			parser.getCompilationUnit().error(token.getPosition(), "Syntax error on token '" + getLexer().getString(token.getPosition()) + "', " + message);
		} else if(token != null && token.getId() == 0) {
			token = getLexer().previousToken();
			if(token.getPosition() != null)
				parser.getCompilationUnit().error(token.getPosition(), "Syntax error on token '" + getLexer().getString(token.getPosition()) + "', unexpected end of file");
		}
	}

	int lex() {
		yylval = getLexer().nextToken();
		return yylval.getId(); 
	}

	int parse(Parser parser) {
		this.parser = parser;

		int nResult = endStack;

		while(true) {
			// endStack:
			if(nResult == endStack) {
				/* push stack */
				if(++ssPos - YYMAXDEPTH > 0) {
					error(); //"pcyacc internal stack overflow"
					return(1);
				}
				statestack[ssPos] = tmpstate;
				++sp;
				s[sp] = yyval;
			}

			// newState:
			n = yypact[tmpstate];
			if (n <= PCYYFLAG) {
				nResult = doDefault();
				if(nResult < endStack)
					return nResult;
				continue; // defaultact; /*  a simple state */
			}

			if(pcyytoken < 0) {
				if((pcyytoken = lex()) < 0)
					pcyytoken = 0;
			}

			if((n += pcyytoken) < 0 || n >= YYLAST) {
				nResult = doDefault();
				if(nResult < endStack)
					return nResult;
				continue; // defaultact;
			}

			if(yychk[n=yyact[n]] == pcyytoken) { 
			/* a shift */
				pcyytoken = -1;
				yyval = yylval;
				tmpstate = n;
				if(pcyyerrfl > 0)
					--pcyyerrfl;
				continue; // enstack;
			}

			nResult = doDefault();

			if(nResult < endStack)
				return nResult;
		}
	}

	int doDefault() {
		if ((n=yydef[tmpstate]) == -2) {
			if (pcyytoken < 0) {
				if((pcyytoken = lex()) < 0)
					pcyytoken = 0;
			}

			for(yyxi = 0; (yyexca[yyxi] != -1) || (yyexca[yyxi + 1] != tmpstate); yyxi += 2) {
			}

			while(yyexca[yyxi += 2] >= 0) {
				if(yyexca[yyxi] == pcyytoken)
					break;
			}

			if((n = yyexca[yyxi + 1]) < 0) /* an accept action */
				return (0);
		}

		if(n == 0) {
			/* error situation */
			switch (pcyyerrfl) {
			case WAS0ERR:          /* an error just occurred */
				error();
				++pcyyerrct;
			case WAS1ERR:
			case WAS2ERR:           /* try again */
				pcyyerrfl = WAS3ERR;
				/* find a state for a legal shift action */
				while (ssPos >= 0) {
					n = yypact[statestack[ssPos]] + YYERRCODE;
					if(n >= 0 && n < YYLAST && yychk[yyact[n]] == YYERRCODE) {
						tmpstate = yyact[n];  /* simulate a shift of "error" */
						return endStack;//break enstack;
					}
					n = yypact[statestack[ssPos]];

					/* the current yyps has no shift on "error", pop stack */
					--ssPos;
					--sp;
				}
				return(1);
			case WAS3ERR:  /* clobber input char */
				if (pcyytoken == 0)
					return 1; /* quit */
				pcyytoken = -1;
				return newState;
			} /* switch */
		} /* if */


		/* reduction, given a production n */
		ssPos -= yyr2[n];
		s1 = sp;
		sp -= yyr2[n];
		yyval = s[sp + 1];
		m = n;
		/* find next state from goto table */
		n = yyr1[n];
		j = yypgo[n] + statestack[ssPos] + 1;
		if(j >= YYLAST || yychk[ tmpstate = yyact[j] ] != -n) 
			tmpstate = yyact[yypgo[n]];

		switch (m) {
			
case 9:
{ parser.onImport(); } break;
case 10:
{ parser.onImportList(true); } break;
case 11:
{ parser.onImportList(false); } break;
case 12:
{ parser.onImportElement(s[s1 - 2], s[s1 - 0]); } break;
case 13:
{ parser.onAttribute(s[s1 - 2], s[s1 - 1], null, s[s1 - 0]); } break;
case 14:
{ parser.onAttribute(s[s1 - 3], s[s1 - 2], s[s1 - 1], s[s1 - 0]); } break;
case 15:
{ parser.onAttribute(s[s1 - 3], s[s1 - 2], s[s1 - 0]); } break;
case 16:
{ parser.onToken(s[s1 - 0]); } break;
case 17:
{ parser.onToken(s[s1 - 0]); } break;
case 18:
{ parser.onToken(s[s1 - 0]); } break;
case 19:
{ parser.onToken(s[s1 - 0]); } break;
case 20:
{ parser.onToken(s[s1 - 0]); } break;
case 21:
{ parser.onToken(s[s1 - 0]); } break;
case 24:
{ parser.onModifiers(true); } break;
case 25:
{ parser.onModifiers(false); } break;
case 26:
{ parser.onQualifiedName(true, s[s1 - 0]); } break;
case 27:
{ parser.onQualifiedName(false, s[s1 - 0]); } break;
case 28:
{ error(s[s1 - 0]); } break;
case 29:
{ parser.startEnum(s[s1 - 0]); } break;
case 30:
{ parser.setEnumName(s[s1 - 0]); } break;
case 33:
{ parser.applyModifiers(); } break;
case 34:
{ error("EnumBody is missing"); } break;
case 36:
{ parser.startEnumBody(s[s1 - 0]); } break;
case 37:
{ parser.addEnumMember(s[s1 - 0]); } break;
case 43:
{ error("'}' expected after this token"); } break;
case 44:
{ parser.finishEnumBody(s[s1 - 0]); } break;
case 45:
{ parser.startClass(null, s[s1 - 0]); } break;
case 46:
{ parser.startClass(s[s1 - 1], s[s1 - 0]); } break;
case 47:
{ parser.setClassName(s[s1 - 0]); } break;
case 49:
{ parser.setClassBase(); } break;
case 54:
{ parser.applyModifiers(); } break;
case 55:
{ parser.finishClass(); } break;
case 56:
{ parser.finishClass(); } break;
case 57:
{ parser.startClassBody(s[s1 - 0]); } break;
case 60:
{ parser.finishClassBody(s[s1 - 0]); } break;
case 62:
{ parser.applyModifiers(); } break;
case 64:
{ parser.applyModifiers(); } break;
case 66:
{ parser.applyModifiers(); } break;
case 68:
{ parser.applyModifiers(); } break;
case 69:
{ parser.addClassMember(); } break;
case 72:
{ parser.onMissingSemicolon();} break;
case 73:
{ parser.onMissingSemicolon();} break;
case 74:
{ parser.onMissingSemicolon();} break;
case 75:
{ parser.onMissingSemicolon();} break;
case 76:
{ parser.onMissingSemicolon();} break;
case 81:
{ parser.startRecords(s[s1 - 0]); } break;
case 82:
{ parser.finishRecords(); } break;
case 83:
{ parser.startRecordsBody(s[s1 - 0]); } break;
case 86:
{ parser.finishRecordsBody(s[s1 - 0]); } break;
case 87:
{ parser.startRecord(s[s1 - 0]); } break;
case 88:
{ parser.setRecordValue(s[s1 - 0]); } break;
case 90:
{ parser.applyModifiers(); } break;
case 91:
{ parser.addRecord(); } break;
case 94:
{ parser.onVariableType(false); } break;
case 95:
{ parser.onVariableType(true); } break;
case 99:
{ error(s[s1 - 0]); } break;
case 100:
{ parser.onVariableDeclarator(s[s1 - 0]); } break;
case 101:
{ parser.onVariableDeclarator(s[s1 - 2], s[s1 - 0]); } break;
case 103:
{ parser.onVariableDeclaratorInit(s[s1 - 1]); } break;
case 104:
{ parser.onVariableInit(null); } break;
case 105:
{ parser.onVariableInit(s[s1 - 1]); } break;
case 106:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onVariableInit(s[s1 - 1]); } break;
case 107:
{ parser.createMethod(s[s1 - 1]); } break;
case 108:
{ parser.createPriorityOperator(s[s1 - 1]); } break;
case 109:
{ parser.createCastOperator(s[s1 - 2], s[s1 - 1]); } break;
case 110:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 111:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 112:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 113:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 114:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 115:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 116:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 117:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 118:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 119:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 120:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 121:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 122:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 123:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 124:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 125:
{ parser.setMethodBody(); } break;
case 127:
{ parser.createParameter(); } break;
case 130:
{ parser.startParameters(s[s1 - 0]); } break;
case 131:
{ parser.finishParameters(s[s1 - 0]); } break;
case 132:
{ parser.finishParameters(s[s1 - 0]); } break;
case 136:
{ parser.startArrayInitializer(s[s1 - 0]); } break;
case 138:
{ parser.finishArrayInitializer(s[s1 - 0]); } break;
case 139:
{ parser.finishArrayInitializer(s[s1 - 0]); } break;
case 142:
{ parser.addArrayInitializer(); } break;
case 143:
{ parser.addArrayInitializer(); } break;
case 144:
{ parser.addArrayInitializer(); } break;
case 145:
{ parser.onMapElement(s[s1 - 4], s[s1 - 0]); } break;
case 146:
{ parser.onMapElement(s[s1 - 4], s[s1 - 0]); } break;
case 147:
{ parser.startCompound(s[s1 - 0]); } break;
case 148:
{ parser.finishCompound(s[s1 - 0]); } break;
case 149:
{ parser.finishCompound(s[s1 - 0]); } break;
case 150:
{ parser.addStatement(); } break;
case 151:
{ parser.addStatement(); } break;
case 152:
{ parser.onDeclarator(); } break;
case 155:
{ parser.onStatement(); } break;
case 156:
{ parser.onStatement(); } break;
case 157:
{ parser.onStatement2(); } break;
case 158:
{ parser.onStatement2(); } break;
case 163:
{ parser.onStatement1(); } break;
case 164:
{ parser.onStatement1(); } break;
case 165:
{ parser.onStatement1(); } break;
case 166:
{ parser.onStatement1(); } break;
case 167:
{ parser.onStatement1(); } break;
case 168:
{ parser.onStatement1(); } break;
case 169:
{ parser.onStatement1(); } break;
case 170:
{ parser.onStatement1(); } break;
case 171:
{ parser.onStatement1(); } break;
case 172:
{ parser.onStatement1(); } break;
case 173:
{ parser.onStatement1(); } break;
case 174:
{ parser.onThrowStatement(s[s1 - 2]); } break;
case 175:
{ parser.onTryStatement(s[s1 - 1]); } break;
case 176:
{ parser.onCatchClause(s[s1 - 4]); } break;
case 177:
{ parser.onFinallyStatement(s[s1 - 1]); } break;
case 178:
{ parser.addCatchStatement(); } break;
case 179:
{ parser.addCatchStatement(); } break;
case 183:
{ parser.onIfStatement(s[s1 - 2], null); } break;
case 184:
{ parser.onIfStatement(s[s1 - 4], s[s1 - 1]); } break;
case 185:
{ parser.onWhileStatement(s[s1 - 2]); } break;
case 186:
{ parser.onDoWhileStatement(s[s1 - 4], s[s1 - 2]); } break;
case 187:
{ parser.onDeclarator(); } break;
case 189:
{ parser.onForStatement(s[s1 - 7], false); } break;
case 190:
{ parser.onForStatement(s[s1 - 8], true); } break;
case 194:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 195:
{ parser.onJumpStatement(s[s1 - 2], true); } break;
case 196:
{ parser.onJumpStatement(s[s1 - 2], true); } break;
case 197:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 198:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 200:
{ parser.onAssignment(s[s1 - 1]); } break;
case 201:
{ parser.onAssignment(s[s1 - 1]); } break;
case 202:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 203:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 204:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 205:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 206:
{ parser.onOperatorAssign(s[s1 - 1]); parser.onAssignment(s[s1 - 1]); } break;
case 208:
{ parser.onInstanceOf(s[s1 - 1]); } break;
case 210:
{ parser.onTernaryOperator(s[s1 - 3], s[s1 - 1]); } break;
case 211:
{ parser.onElvisOperator(s[s1 - 1]); } break;
case 212:
{ parser.onElvisOperator(s[s1 - 1]); } break;
case 214:
{ parser.onOperator(s[s1 - 1]); } break;
case 216:
{ parser.onOperator(s[s1 - 1]); } break;
case 218:
{ parser.onOperator(s[s1 - 1]); } break;
case 219:
{ parser.onOperator(s[s1 - 1]); } break;
case 221:
{ parser.onNull(s[s1 - 0]); } break;
case 222:
{ parser.onOperator(s[s1 - 1]); } break;
case 223:
{ parser.onOperator(s[s1 - 1]); } break;
case 224:
{ parser.onOperator(s[s1 - 1]); } break;
case 225:
{ parser.onOperator(s[s1 - 1]); } break;
case 227:
{ parser.onOperator(s[s1 - 1]); } break;
case 228:
{ parser.onOperator(s[s1 - 1]); } break;
case 230:
{ parser.onOperator(s[s1 - 1]); } break;
case 231:
{ parser.onOperator(s[s1 - 1]); } break;
case 232:
{ parser.onOperator(s[s1 - 1]); } break;
case 235:
{ parser.onUnary(s[s1 - 1]); } break;
case 236:
{ parser.onUnary(s[s1 - 1]); } break;
case 237:
{ parser.onTypeCast(); } break;
case 238:
{ parser.onArrayTypeCast(); } break;
case 239:
{ parser.onNewExpression(s[s1 - 1], s[s1 - 0]); } break;
case 240:
{ parser.onContainer(s[s1 - 0]); } break;
case 241:
{ parser.addContainer(s[s1 - 0]); } break;
case 242:
{ parser.onBracedExpression(s[s1 - 2], s[s1 - 0]); } break;
case 244:
{ parser.onThis(s[s1 - 0]); } break;
case 245:
{ parser.onSuper(s[s1 - 0]); } break;
case 246:
{ parser.onConstant(s[s1 - 0]); } break;
case 248:
{ parser.onTypeToPostfix(); } break;
case 249:
{ parser.onTypeToPostfix(); } break;
case 250:
{ parser.onMethodCall(false); } break;
case 252:
{ parser.onIndex(s[s1 - 1], s[s1 - 0], false); } break;
case 253:
{ parser.onIndex(s[s1 - 2], s[s1 - 0], true); } break;
case 254:
{ parser.onIndices(true); } break;
case 255:
{ parser.onIndices(false); } break;
case 258:
{ parser.onPostfix(); } break;
case 259:
{ parser.onMethodCall(true); } break;
case 260:
{ error(s[s1 - 0]); } break;
case 261:
{ parser.onArrayAccess(); } break;
case 262:
{ parser.onPostfix(); } break;
case 263:
{ parser.onMethodCall(true); } break;
case 264:
{ error(s[s1 - 0]); } break;
case 266:
{ parser.startExpressions(s[s1 - 0]); } break;
case 267:
{ parser.finishExpressions(s[s1 - 0]); } break;
case 268:
{ parser.finishExpressions(s[s1 - 0]); } break;
case 269:
{ parser.addExpression(); } break;
case 270:
{ parser.addExpression(); } break;
case 271:
{ parser.addExpression(); } break;
case 272:
{ parser.addExpression(); } break;
		}
		return endStack;
	}
}