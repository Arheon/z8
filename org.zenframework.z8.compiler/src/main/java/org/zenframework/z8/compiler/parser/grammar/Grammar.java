
package org.zenframework.z8.compiler.parser.grammar;

//import org.zenframework.z8.compiler.core.ILanguageElement;
import org.zenframework.z8.compiler.core.IPosition;
import org.zenframework.z8.compiler.core.IToken;
import org.zenframework.z8.compiler.parser.grammar.lexer.Lexer;
import org.zenframework.z8.compiler.parser.grammar.lexer.token.Token;

public class Grammar
{
int WHITESPACE = 257;
int LINEBREAK = 258;
int COMMENT = 259;
int NOT = 260;
int MUL = 261;
int DIV = 262;
int MOD = 263;
int ADD = 264;
int SUB = 265;
int CARET = 266;
int MUL_CARET = 267;
int CARET_MUL = 268;
int MUL_CARET_MUL = 269;
int EQU = 270;
int NOT_EQU = 271;
int LESS = 272;
int MORE = 273;
int LESS_EQU = 274;
int MORE_EQU = 275;
int AND = 276;
int OR = 277;
int GROUP = 278;
int ADD_ASSIGN = 279;
int SUB_ASSIGN = 280;
int MUL_ASSIGN = 281;
int DIV_ASSIGN = 282;
int MOD_ASSIGN = 283;
int CARET_ASSIGN = 284;
int MUL_CARET_ASSIGN = 285;
int CARET_MUL_ASSIGN = 286;
int MUL_CARET_MUL_ASSIGN = 287;
int LBRACE = 288;
int RBRACE = 289;
int LBRACKET = 290;
int RBRACKET = 291;
int LCBRACE = 292;
int RCBRACE = 293;
int BRACKETS = 294;
int COLON = 295;
int SEMICOLON = 296;
int ASSIGN = 297;
int QUESTION = 298;
int COMMA = 299;
int DOT = 300;
int CONSTANT = 301;
int IDENTIFIER = 302;
int OPERATOR = 303;
int IF = 304;
int ELSE = 305;
int DO = 306;
int FOR = 307;
int WHILE = 308;
int BREAK = 309;
int RETURN = 310;
int CONTINUE = 311;
int THIS = 312;
int SUPER = 313;
int CONTAINER = 314;
int NULL = 315;
int IMPORT = 316;
int CLASS = 317;
int PUBLIC = 318;
int PROTECTED = 319;
int PRIVATE = 320;
int EXTENDS = 321;
int ENUM = 322;
int RECORDS = 323;
int AUTO = 324;
int NEW = 325;
int STATIC = 326;
int TRY = 327;
int CATCH = 328;
int FINALLY = 329;
int THROW = 330;
int VIRTUAL = 331;
int FINAL = 332;
int YYERRCODE = 256;

int yyexca[] = {
  -1, 1,
  0, -1,
  -2, 0,
  -1, 71,
  302, 94,
  303, 94,
  -2, 104,
  -1, 245,
  302, 96,
  -2, 268,
  -1, 246,
  302, 97,
  -2, 269,
  0,
};

int YYNPROD = 292;
int YYLAST = 1303;
int yyact[] = {
     104,     313,     346,     347,     224,      48,     112,      30,
      53,       9,     285,     431,     219,     287,      35,      35,
     445,     145,      35,      35,      76,     329,      84,      35,
     107,     151,     152,     317,     156,     234,     289,     243,
     244,     242,     202,      24,      26,      25,     103,      80,
      77,      28,     154,      27,      78,      79,     101,     222,
      29,      78,      99,     100,     241,      78,     197,     230,
     116,      54,     196,      80,     141,     115,      80,      80,
      70,      79,      52,      80,      79,      79,      56,     231,
     436,      79,     107,      50,     102,     142,     145,      80,
      55,     445,     335,     192,      56,      79,     445,     181,
      35,     196,     234,      56,     243,     244,     242,     239,
     238,     240,     110,     111,     114,      56,      30,     150,
     188,     159,     374,     141,     118,     141,     233,     115,
     320,     241,      35,      76,     230,     185,      78,      56,
     405,     132,     441,      80,     409,     404,      89,      80,
     458,      79,      24,      26,      25,      79,     410,     403,
      28,     453,      27,     163,     406,     107,     187,      29,
      78,     246,     407,     222,     145,      65,     452,     245,
     143,     448,     181,      35,      80,     429,      30,     428,
     162,     107,      79,     415,     247,     110,     111,     114,
     412,      65,     411,     372,      65,      65,     366,     365,
      66,     128,     115,     193,     186,     201,     200,     199,
       9,      22,      24,      26,      25,     122,      21,     198,
      28,      81,      27,      57,     145,     191,      39,      29,
      23,     149,     206,      43,     205,     326,     205,     205,
     205,     205,     205,     205,     161,     216,     160,     141,
     462,     459,     455,     246,     288,     232,     450,     320,
     246,     245,     234,     332,     340,     413,     245,     328,
     156,     128,     291,     370,     164,     128,     223,     370,
     167,     168,     169,     170,     246,      94,     367,     104,
     175,     176,     245,      92,     112,     177,     178,     179,
     369,      36,      69,     251,     227,      63,     315,     144,
     101,     132,     249,     323,      99,     100,     322,     337,
     345,     361,     175,     176,     195,     141,     194,      16,
      61,     368,     171,     172,     173,     174,     101,     344,
     162,     105,      99,     100,     107,      44,       3,     232,
     191,      31,      14,     106,     232,      12,     350,     108,
      98,     181,      35,     189,      91,     102,     363,      83,
      45,      90,     107,      46,     110,     111,     114,      59,
     232,      22,     432,     121,      16,     131,       3,     181,
      35,     115,     167,     168,     169,     170,     165,     166,
      23,     223,     110,     111,     114,     243,     120,     124,
      14,     241,      44,     237,      12,     135,     433,     115,
     414,     413,     136,     137,     138,     139,      78,       6,
     141,     236,     246,     190,      33,     235,     228,     134,
     245,     246,      56,     246,     347,     226,     427,     245,
     113,     245,     117,     229,     218,     430,     361,      63,
      93,     370,     144,     410,     408,     314,      69,     220,
     351,       6,     225,     230,     312,     190,     324,     155,
     242,      62,      44,     286,      80,      61,      44,     431,
      72,     440,      79,     294,     295,      74,      80,     292,
     250,     437,     435,     450,      79,     253,     238,     416,
     418,     419,     420,     421,     422,     423,     424,     425,
     426,     248,     147,     316,     148,      59,     232,     146,
     368,     364,     313,     445,     133,     232,     246,     232,
      73,     189,      60,     287,     245,      64,      58,     456,
      37,      38,     451,     204,     246,     224,     336,     246,
     459,     325,     245,      10,     288,     245,     446,     290,
     461,      96,     462,     463,     219,     438,     444,     315,
     351,     434,     442,     453,     343,     103,      15,      85,
     352,     109,     353,     354,     355,     356,     357,     358,
     359,     360,     405,      34,      47,     457,     349,      51,
     447,     458,     460,      41,     222,      70,     407,     221,
     373,     449,     432,     371,      82,     348,      42,     441,
     454,     448,     232,      40,      38,       5,     231,     238,
      71,      32,     232,      11,      44,      68,      49,     232,
     232,      86,     101,     232,     166,      94,      99,     100,
      92,     233,     140,     184,      71,     293,      17,      71,
      71,      19,     417,      20,      71,      32,       5,       4,
       8,     155,     310,       7,       2,      30,     107,     246,
     158,     319,     145,     327,       1,       0,       0,     223,
      58,      35,      76,     181,      35,       0,     234,      36,
     243,     244,     242,     239,     238,     240,     110,     111,
     114,      24,      26,      25,     334,     342,      30,      28,
     130,      27,      83,     115,     227,     241,      29,      78,
     230,       0,      78,       0,      71,     443,     330,     338,
      71,     333,     341,     101,     410,       0,     345,      99,
     100,      22,      24,      26,      25,     133,      21,     184,
      28,     251,      27,       0,     344,       0,     249,      29,
      23,       0,       0,       0,      67,     158,     206,     107,
     109,     304,     305,     145,     217,     101,       0,       0,
     130,      99,     100,       0,     181,      35,       0,     234,
      68,     243,     244,     242,     239,     238,     240,     110,
     111,     114,       0,     309,       0,     184,      93,       0,
     208,     107,     318,       0,     115,     145,     241,     192,
       0,     230,       0,      78,       0,       0,     181,      35,
     113,     234,       0,     243,     244,     242,     239,     238,
     240,     110,     111,     114,     223,      30,       0,     129,
      30,       0,       0,     123,     226,       0,     115,       0,
     241,      35,     223,     230,      35,      78,       0,      62,
     223,       0,     220,     208,      30,       0,     331,     339,
     225,      24,      26,      25,      24,      26,      25,      28,
     254,      27,      28,       0,      27,       0,      29,      78,
     101,      29,      78,     140,      99,     100,       0,       0,
      24,      26,      25,     153,       0,      95,      28,     129,
      27,       0,       0,     129,       0,      29,      67,       0,
       0,       0,     176,      96,     107,     101,       0,       0,
     191,      99,     100,     101,     362,     119,     125,      99,
     100,     181,      35,       0,       0,       0,       0,     192,
       0,       0,       0,       0,     110,     111,     114,       0,
     403,     107,     321,       0,       0,     191,       0,     107,
     101,     115,       0,     191,      99,     100,     181,      35,
       0,       0,       0,       0,     181,      35,       0,       0,
     101,     110,     111,     114,      99,     100,       0,     110,
     111,     114,       0,     223,     316,       0,     115,      62,
       0,     439,       0,     221,     115,      62,       0,       0,
       0,     181,      35,     101,     316,       0,       0,      99,
     100,     311,       0,     101,     110,     111,     114,      99,
     100,     181,      35,       0,       0,       0,       0,       0,
       0,     115,       0,       0,     110,     111,     114,     107,
       0,       0,     215,       0,       0,     158,       0,     107,
       0,     115,      87,       0,     181,      35,     101,     158,
       0,       0,      99,     100,      88,      35,       0,     110,
     111,     114,       0,     255,       0,       0,     284,     110,
     111,     114,       0,       0,     115,       0,       0,       0,
       0,       0,     107,       0,     115,     296,     297,     298,
     299,     300,     301,     302,     303,       0,       0,     181,
      35,       0,       0,       0,       0,       0,      97,       0,
       0,       0,     110,     111,     114,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,     115,
     256,     257,     258,     259,     260,     261,     262,     263,
     264,     265,     266,     267,     268,     269,     270,     271,
     272,     273,       0,     275,     276,     277,     278,     279,
     280,     281,     282,     283,     352,     353,     354,     355,
     356,     357,     358,     359,     360,     274,       0,     141,
       0,       0,       0,       0,       0,       0,     351,     127,
       0,     185,       0,     154,     375,     376,     377,     378,
     379,     380,     381,     382,     383,     384,     385,     386,
     387,     388,     389,     390,     391,     392,     393,     394,
     395,     396,     397,     398,     399,     400,     401,     402,
     256,      13,     180,     182,     183,     203,      75,       0,
       0,     207,      18,       0,      18,      18,     168,     169,
     170,     171,     172,     173,     174,      95,       0,      18,
       0,       0,      75,       0,     207,      75,       0,       0,
       0,       0,      75,       0,       0,       0,       0,       0,
      66,      18,       0,     127,       0,       0,     157,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,      66,       0,       0,     122,
     126,       0,       0,       0,      61,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
     306,     307,     308,     100,       0,     101,     177,       0,
       0,       0,      75,     257,     258,     259,     260,     261,
     262,     263,     264,     265,     266,     267,     268,     269,
     270,     271,     272,     273,     274,     275,     276,     277,
     278,     279,     280,     281,     282,     283,     153,       0,
       0,       0,       0,       0,      62,     122,       0,       0,
     148,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,     209,     210,     211,     212,
     213,     214,       0,       0,       0,       0,     252,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,     178,     179,      97,       0,       0,       0,     135,
     136,     137,     138,     139,     203,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,     252,       0,       0,       0,      13,
};

int yypact[] = {
    -132,   -1000,     308,     308,    -307,   -1000,   -1000,   -1000,
   -1000,    -284,     -94,     -89,   -1000,     308,   -1000,    -316,
   -1000,    -227,    -236,   -1000,   -1000,   -1000,   -1000,    -309,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,    -245,     308,
   -1000,   -1000,    -216,   -1000,   -1000,     -98,    -283,   -1000,
   -1000,    -100,    -280,   -1000,   -1000,   -1000,   -1000,    -284,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,     607,   -1000,
    -246,   -1000,    -283,   -1000,   -1000,    -188,     419,   -1000,
   -1000,   -1000,    -283,   -1000,   -1000,   -1000,    -176,      70,
    -144,     -91,    -197,    -277,    -260,   -1000,    -284,   -1000,
   -1000,   -1000,    -194,   -1000,   -1000,   -1000,    -209,   -1000,
     -77,     -79,   -1000,    -138,     -40,   -1000,      64,      10,
      -8,   -1000,   -1000,     642,     642,     642,    -183,    -147,
     -95,   -1000,    -217,     642,   -1000,    -230,   -1000,   -1000,
   -1000,   -1000,   -1000,    -248,   -1000,   -1000,   -1000,    -105,
    -113,   -1000,     275,   -1000,    -114,    -115,     422,    -268,
   -1000,   -1000,   -1000,   -1000,       4,     -75,       4,       4,
       4,       4,       4,       4,   -1000,     599,   -1000,   -1000,
     359,   -1000,   -1000,    -129,     442,   -1000,   -1000,     -56,
     708,   -1000,     -56,    -279,   -1000,    -272,    -181,    -280,
   -1000,   -1000,     642,     642,     642,     642,     642,     642,
     642,     642,     642,     642,     642,     642,     642,     642,
     642,     642,     642,     642,   -1000,   -1000,   -1000,   -1000,
     -75,    -284,    -183,   -1000,   -1000,   -1000,     572,   -1000,
    -287,     -66,   -1000,     521,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,     -94,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
     -86,   -1000,     278,   -1000,   -1000,   -1000,    -275,    -214,
   -1000,   -1000,   -1000,   -1000,    -326,    -326,     642,   -1000,
     717,   -1000,    -264,   -1000,   -1000,   -1000,     492,    -121,
    -122,     -96,    -264,     393,     -53,   -1000,     -95,   -1000,
     442,   -1000,    -125,   -1000,     442,    -191,   -1000,   -1000,
     -56,     -56,     -56,     -56,     -56,     -56,     -56,     -56,
     -56,     -56,     -56,     -56,     -56,     -56,     -56,     -56,
     -56,     -56,     -56,     -56,     -56,     -56,     -56,     -56,
     -56,     -56,     -56,     -56,   -1000,   -1000,    -164,   -1000,
   -1000,   -1000,   -1000,    -175,     -40,   -1000,     -26,     -26,
     -16,     -16,     -16,     -16,     -16,     -16,     -16,     -16,
      -8,      -8,   -1000,   -1000,   -1000,    -199,   -1000,   -1000,
    -153,   -1000,   -1000,   -1000,     642,   -1000,    -199,   -1000,
   -1000,   -1000,    -165,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
    -126,    -128,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,     -59,     -96,   -1000,   -1000,    -133,     527,
     642,     642,     642,     642,     642,     642,     642,     642,
     642,     393,   -1000,    -137,    -139,   -1000,   -1000,   -1000,
     393,    -297,      26,   -1000,   -1000,   -1000,    -229,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,    -288,   -1000,     642,   -1000,     556,
    -177,   -1000,     527,   -1000,   -1000,    -288,   -1000,   -1000,
   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,   -1000,   -1000,    -289,   -1000,   -1000,   -1000,    -264,
     642,    -143,   -1000,   -1000,   -1000,   -1000,   -1000,   -1000,
   -1000,     642,   -1000,   -1000,     -67,     393,    -146,    -159,
     642,     -71,     -96,   -1000,   -1000,     642,    -168,   -1000,
   -1000,     -72,     642,     393,     -73,   -1000,     393,   -1000,
};

int yypgo[] = {
       0,     572,     564,     294,     525,     563,     560,     559,
     359,     489,     555,      71,     553,     279,    1049,     550,
     534,     298,     531,     523,     518,     311,     516,     507,
    1057,     503,     500,     487,     486,     301,     467,     257,
     459,     457,     456,     454,     280,     110,     727,     644,
     261,     533,     453,     258,     319,     450,     448,     439,
     436,     434,     433,     421,     259,     416,     266,       6,
       0,     444,    1015,      64,     413,    1053,     408,     763,
       4,      13,     403,     399,     202,     397,     396,       1,
     389,     386,     380,      12,     238,     391,     511,      47,
     394,     373,     260,     379,     287,     272,     366,      38,
     365,     361,     350,     347,      76,     313,     308,     251,
     384,     245,     765,     473,     950,     304,     303,     299,
     289,     376,     546,     278,     276,     270,
};

int yyr1[] = {
       0,       1,       1,       1,       1,       3,       3,       4,
       4,       2,       7,       7,       8,      10,      10,      10,
      12,      12,      12,      12,      12,      12,      13,      13,
      14,      14,       9,       9,       9,      15,      16,      17,
      18,      18,       6,       6,      20,      21,      22,      22,
      22,      23,      23,      19,      19,      24,      24,      25,
      26,      27,      28,      29,      29,      30,      30,       5,
      32,      33,      34,      34,      31,      36,      36,      38,
      38,      40,      40,      42,      42,      44,      45,      45,
      45,      45,      45,      45,      45,      45,      45,      35,
      35,      46,      43,      48,      49,      49,      47,      51,
      52,      53,      53,      54,      50,      50,      55,      56,
      58,      58,      59,      59,      60,      60,      37,      37,
      39,      39,      39,      39,      39,      39,      39,      62,
      62,      62,      62,      62,      62,      62,      62,      62,
      62,      62,      62,      62,      62,      62,      62,      62,
      62,      62,      62,      62,      62,      62,      62,      62,
      62,      62,      62,      62,      62,      62,      41,      41,
      65,      66,      66,      67,      63,      63,      61,      61,
      61,      69,      68,      68,      68,      70,      70,      71,
      71,      72,      73,      64,      64,      74,      74,      76,
      75,      75,      75,      75,      75,      75,      75,      75,
      75,      75,      75,      75,      75,      75,      75,      75,
      75,      75,      75,      75,      75,      78,      83,      84,
      85,      86,      86,      77,      77,      77,      80,      80,
      88,      89,      90,      90,      91,      91,      81,      81,
      81,      82,      82,      82,      82,      82,      79,      79,
      79,      79,      79,      79,      79,      79,      79,      79,
      79,      79,      11,      93,      93,      94,      94,      95,
      95,      96,      96,      96,      97,      97,      97,      97,
      97,      97,      97,      97,      97,      98,      98,      98,
      99,      99,      99,      99,     100,     100,     100,     100,
     101,     101,     101,     102,     103,     103,      87,      87,
     104,     104,     104,     104,     104,     104,     104,     106,
     106,      57,      57,      92,      92,      92,      92,      92,
      92,      92,      92,      92,     105,     108,     107,     107,
     109,     109,     109,     109,
};

int yyr2[] = {
       2,       0,       1,       1,       2,       1,       2,       1,
       1,       1,       1,       2,       3,       3,       4,       4,
       1,       1,       1,       1,       1,       1,       1,       1,
       1,       2,       1,       3,       2,       1,       1,       2,
       1,       2,       1,       2,       1,       1,       1,       3,
       2,       1,       2,       1,       2,       1,       2,       1,
       1,       1,       2,       1,       3,       1,       2,       2,
       2,       1,       1,       2,       2,       1,       2,       1,
       2,       1,       2,       1,       2,       1,       2,       2,
       3,       3,       3,       3,       2,       1,       1,       1,
       2,       1,       2,       1,       1,       2,       2,       1,
       3,       1,       2,       2,       1,       2,       1,       2,
       1,       1,       1,       2,       2,       3,       1,       3,
       1,       3,       3,       3,       3,       3,       3,       3,
       2,       3,       4,       4,       4,       4,       4,       4,
       4,       4,       4,       4,       4,       4,       4,       4,
       4,       4,       4,       4,       4,       4,       4,       4,
       4,       4,       4,       4,       4,       4,       2,       2,
       1,       1,       3,       1,       2,       3,       1,       1,
       1,       1,       2,       3,       4,       1,       3,       1,
       1,       5,       1,       2,       3,       1,       2,       1,
       1,       1,       2,       2,       3,       3,       1,       1,
       1,       1,       2,       2,       2,       2,       2,       2,
       2,       2,       2,       2,       2,       3,       2,       5,
       2,       2,       2,       1,       2,       2,       3,       5,
       3,       5,       1,       1,       8,       9,       1,       1,
       1,       2,       3,       3,       2,       2,       1,       3,
       3,       3,       3,       3,       3,       3,       3,       3,
       3,       3,       1,       1,       5,       1,       3,       1,
       3,       1,       3,       3,       1,       3,       3,       3,
       3,       3,       3,       3,       3,       1,       3,       3,
       1,       3,       3,       3,       1,       2,       2,       2,
       1,       2,       2,       2,       1,       3,       3,       1,
       1,       1,       1,       1,       1,       1,       1,       2,
       3,       1,       2,       1,       1,       3,       3,       2,
       2,       3,       3,       2,       2,       1,       2,       3,
       1,       1,       3,       3,
};

int yychk[] = {
   -1000,      -1,      -2,      -3,      -7,      -4,      -8,      -5,
      -6,     316,     -30,     -18,     -29,     -14,     -17,     -28,
     -13,     -15,     -24,     -12,     -10,     322,     317,     332,
     318,     320,     319,     326,     324,     331,     290,      -3,
      -4,      -8,      -9,     302,     -31,     -34,     -33,     292,
     -19,     -23,     -20,     292,     -13,     -17,     -29,     -26,
     321,     -16,     302,     -25,     302,     317,     302,     296,
     300,     293,     -35,     -44,     -45,     -36,     -38,     -40,
     -42,     -37,     -14,     -39,     -41,     -43,     -59,      -9,
     -62,     -46,     -60,     -58,     303,     323,     332,     -55,
     -56,     293,     -22,     -21,     302,     -27,      -9,     291,
     301,     -11,     -93,     -94,     -95,     -96,     -97,     -98,
     -99,    -100,    -101,     264,     265,     260,     -92,     -87,
     -56,    -104,    -103,     288,    -102,      -9,     312,     313,
     -55,    -105,     314,     325,     302,     -44,     296,     -38,
     -36,     -40,     -14,     296,     -36,     -38,     -14,     -58,
     -37,     -39,     -41,     -43,     297,     -57,     297,     279,
     284,     285,     286,     287,    -106,     290,     -64,     296,
     -73,     292,     -47,     -49,     -48,     292,     300,     302,
     303,     -63,     302,     -67,     288,     -58,      -9,     299,
     291,     291,     298,     277,     276,     270,     271,     266,
     267,     268,     269,     272,     273,     274,     275,     264,
     265,     261,     262,     263,    -100,     301,    -100,    -100,
     -57,     300,     -92,     -87,     -56,     -68,     -69,     292,
     300,     -11,    -107,    -108,     288,     302,     296,     296,
     296,     296,     302,     -61,     -32,     -11,     -68,     -24,
    -106,     -61,     -61,     -61,     -61,     -61,     -61,     291,
     -11,     293,     -74,     -75,     -77,     -78,     -79,     -76,
     -64,     -80,     -81,     -82,     -86,     -83,     330,     -11,
     -92,     -37,     304,     -88,     -89,     -91,     310,     309,
     311,     327,     308,     306,     307,     -55,     -56,     293,
     -50,     -54,     -53,     -52,     -14,     -51,     302,     -63,
     260,     261,     262,     263,     264,     265,     266,     267,
     268,     269,     270,     271,     272,     273,     274,     275,
     276,     277,     297,     279,     280,     281,     282,     283,
     284,     285,     286,     287,     -63,     289,     -66,     -65,
     -59,     302,     -21,     -11,     -95,     -96,     -97,     -97,
     -98,     -98,     -98,     -98,     -98,     -98,     -98,     -98,
     -99,     -99,    -100,    -100,    -100,      -9,    -105,     293,
     -70,     -71,     -72,     -11,     288,     314,      -9,    -105,
     289,     289,    -109,     -11,     -68,     -31,     291,     293,
     -75,     296,     -77,     -78,     -64,     -80,     -81,     296,
     -76,     -79,     -77,     -78,     -64,     -80,     -81,     -82,
     -84,     -85,     328,     329,     -84,     -85,     -11,     297,
     279,     280,     281,     282,     283,     284,     285,     286,
     287,     -87,     296,     -11,     -68,     296,     296,     -64,
     -87,     -75,     288,     -54,     296,     -52,     297,     -63,
     -63,     -63,     -63,     -63,     -63,     -63,     -63,     -63,
     -63,     -63,     -63,     -63,     -63,     -63,     -63,     -63,
     -63,     -63,     -63,     -63,     -63,     -63,     -63,     -63,
     -63,     -63,     -63,     299,     289,     295,     293,     299,
     -11,     289,     299,     296,     296,     288,     -64,     296,
     -11,     -68,     -11,     -11,     -11,     -11,     -11,     -11,
     -11,     -11,     -11,     -75,     296,     296,     -75,     308,
     296,     -90,     -37,     -79,     301,     -65,     -11,     293,
     -71,     299,     -11,     -68,     -59,     305,     -87,     -11,
     296,     -11,     289,     -75,     296,     296,     -11,     289,
     -64,     -79,     296,     289,     -79,     -75,     289,     -75,
};

int yydef[] = {
       1,      -2,       2,       3,       9,       5,      10,       7,
       8,       0,       0,      34,      53,       0,      32,      51,
      24,       0,       0,      22,      23,      29,      45,       0,
      16,      17,      18,      19,      20,      21,       0,       4,
       6,      11,       0,      26,      55,       0,      58,      57,
      35,      43,      41,      36,      25,      33,      54,       0,
      48,      31,      30,      50,      47,      46,       0,      12,
      28,      60,      59,      79,      69,       0,       0,      77,
      78,      61,       0,      63,      65,      67,     102,      -2,
       0,       0,      98,       0,       0,      81,       0,      96,
      97,      44,      42,      38,      37,      52,      49,      13,
     266,       0,     226,     227,     229,     231,     233,     236,
     245,     248,     252,       0,       0,       0,     256,     267,
     269,     275,     276,       0,     263,      94,     264,     265,
     268,     270,     260,       0,      27,      80,      70,       0,
       0,      76,       0,      71,       0,       0,       0,       0,
      62,      64,      66,      68,       0,      95,       0,       0,
       0,       0,       0,       0,     273,       0,     142,     143,
       0,     162,      82,       0,      84,      83,      99,     100,
       0,     112,       0,       0,     147,       0,      94,      40,
      14,      15,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,     253,     266,     254,     255,
     280,     283,     257,     267,     269,     258,       0,     153,
     279,       0,     284,       0,     285,     259,      72,      73,
      74,      75,     100,     103,     150,     151,     152,       0,
     274,     105,     106,     107,     108,     109,     110,     271,
       0,     163,       0,     165,     168,     169,       0,       0,
     174,     175,     176,     177,     195,       0,       0,     214,
     256,     167,       0,     206,     207,     208,       0,       0,
       0,       0,       0,       0,       0,      -2,      -2,      86,
      85,      92,       0,      89,       0,       0,      87,     111,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,     113,     148,       0,     145,
     144,     101,      39,       0,     230,     232,     234,     235,
     241,     242,     243,     244,     237,     238,     239,     240,
     246,     247,     249,     250,     251,     281,     282,     154,
       0,     157,     159,     160,       0,     261,     277,     278,
     262,     286,       0,     288,     289,      56,     272,     164,
     166,     170,     178,     179,     180,     181,     182,     171,
       0,       0,     183,     184,     185,     186,     187,     188,
     194,     197,       0,       0,     193,     196,       0,       0,
       0,       0,       0,       0,       0,       0,       0,       0,
       0,       0,     209,       0,       0,     212,     213,     190,
       0,       0,       0,      93,      91,      90,       0,     114,
     115,     116,     117,     118,     119,     120,     121,     122,
     123,     124,     125,     126,     127,     128,     129,     130,
     131,     132,     133,     134,     135,     136,     137,     138,
     139,     140,     141,       0,     149,       0,     155,       0,
       0,     287,       0,     172,     173,       0,     192,     189,
     215,     216,     217,     218,     219,     220,     221,     222,
     223,     224,     225,     198,     210,     211,     200,       0,
       0,       0,     202,     203,      88,     146,     228,     156,
     158,       0,     290,     291,       0,       0,       0,       0,
       0,       0,       0,     199,     201,       0,       0,     161,
     191,       0,       0,       0,       0,     204,       0,     205,
};

	int yyxi;

	final int endStack = 100;
	final int newState = 101;

	final int YYMAXDEPTH = 200;
	final int YYREDMAX  = 1000;
	final int PCYYFLAG = -1000;
	final int WAS0ERR = 0;
	final int WAS1ERR = 1;
	final int WAS2ERR = 2;
	final int WAS3ERR = 3;

	Token yylval = new Token();
	Token yyval = new Token();

	Token[] s = new Token[YYMAXDEPTH];     /* value stack */
	int pcyyerrfl = 0;           /* error flag */
	int pcyyerrct = 0;           /* error count */
	
	int[] redseq = new int[YYREDMAX];
	int redcnt = 0;
	int pcyytoken = -1;          /* input token */

	int[] statestack = new int[YYMAXDEPTH]; /* state stack */
	int j, m;              /* working index */
	int s1;
	int tmpstate = 0, tmptoken = -1, n;

	int ssPos = -1;
	int sp = -1;

	Parser parser;

	Lexer getLexer() {
		return parser.getLexer();
	}

	void recover() {
		if(yylval.getId() != 0) {
			pcyytoken = -1;
			pcyyerrfl = WAS0ERR;
		}
	}

	void error(IPosition position, String message) {
		parser.getCompilationUnit().error(position, message);
	}

	void error() {
		error(yylval);
	}

	void error(IToken token) {
		error(token, null);
	}

	void error(String message) {
		error(getLexer().previousToken(), message);
	}

	void error(IToken token, String message) {
		if(token != null && token.getPosition() != null) { // empty or fully commented file
			message = message != null ? message : "delete this token";
			parser.getCompilationUnit().error(token.getPosition(), "Syntax error on token '" + getLexer().getString(token.getPosition()) + "', " + message);
		} else if(token != null && token.getId() == 0) {
			token = getLexer().previousToken();
			if(token.getPosition() != null)
				parser.getCompilationUnit().error(token.getPosition(), "Syntax error on token '" + getLexer().getString(token.getPosition()) + "', unexpected end of file");
		}
	}

	int lex() {
		yylval = getLexer().nextToken();
		return yylval.getId(); 
	}

	int parse(Parser parser) {
		this.parser = parser;

		int nResult = endStack;

		while(true) {
			// endStack:
			if(nResult == endStack) {
				/* push stack */
				if(++ssPos - YYMAXDEPTH > 0) {
					error(); //"pcyacc internal stack overflow"
					return(1);
				}
				statestack[ssPos] = tmpstate;
				++sp;
				s[sp] = yyval;
			}

			// newState:
			n = yypact[tmpstate];
			if (n <= PCYYFLAG) {
				nResult = doDefault();
				if(nResult < endStack)
					return nResult;
				continue; // defaultact; /*  a simple state */
			}

			if(pcyytoken < 0) {
				if((pcyytoken = lex()) < 0)
					pcyytoken = 0;
			}

			if((n += pcyytoken) < 0 || n >= YYLAST) {
				nResult = doDefault();
				if(nResult < endStack)
					return nResult;
				continue; // defaultact;
			}

			if(yychk[n=yyact[n]] == pcyytoken) { 
			/* a shift */
				pcyytoken = -1;
				yyval = yylval;
				tmpstate = n;
				if(pcyyerrfl > 0)
					--pcyyerrfl;
				continue; // enstack;
			}

			nResult = doDefault();

			if(nResult < endStack)
				return nResult;
		}
	}

	int doDefault() {
		if ((n=yydef[tmpstate]) == -2) {
			if (pcyytoken < 0) {
				if((pcyytoken = lex()) < 0)
					pcyytoken = 0;
			}

			for(yyxi = 0; (yyexca[yyxi] != -1) || (yyexca[yyxi + 1] != tmpstate); yyxi += 2) {
			}

			while(yyexca[yyxi += 2] >= 0) {
				if(yyexca[yyxi] == pcyytoken)
					break;
			}

			if((n = yyexca[yyxi + 1]) < 0) /* an accept action */
				return (0);
		}

		if(n == 0) {
			/* error situation */
			switch (pcyyerrfl) {
			case WAS0ERR:          /* an error just occurred */
				error();
				++pcyyerrct;
			case WAS1ERR:
			case WAS2ERR:           /* try again */
				pcyyerrfl = WAS3ERR;
				/* find a state for a legal shift action */
				while (ssPos >= 0) {
					n = yypact[statestack[ssPos]] + YYERRCODE;
					if(n >= 0 && n < YYLAST && yychk[yyact[n]] == YYERRCODE) {
						tmpstate = yyact[n];  /* simulate a shift of "error" */
						return endStack;//break enstack;
					}
					n = yypact[statestack[ssPos]];

					/* the current yyps has no shift on "error", pop stack */
					--ssPos;
					--sp;
				}
				return(1);
			case WAS3ERR:  /* clobber input char */
				if (pcyytoken == 0)
					return 1; /* quit */
				pcyytoken = -1;
				return newState;
			} /* switch */
		} /* if */


		/* reduction, given a production n */
		ssPos -= yyr2[n];
		s1 = sp;
		sp -= yyr2[n];
		yyval = s[sp + 1];
		m = n;
		/* find next state from goto table */
		n = yyr1[n];
		j = yypgo[n] + statestack[ssPos] + 1;
		if(j >= YYLAST || yychk[ tmpstate = yyact[j] ] != -n) 
			tmpstate = yyact[yypgo[n]];

		switch (m) {
			
case 9:
{ parser.onImport(); } break;
case 10:
{ parser.onImportList(true); } break;
case 11:
{ parser.onImportList(false); } break;
case 12:
{ parser.onImportElement(s[s1 - 2], s[s1 - 0]); } break;
case 13:
{ parser.onAttribute(s[s1 - 2], s[s1 - 1], null, s[s1 - 0]); } break;
case 14:
{ parser.onAttribute(s[s1 - 3], s[s1 - 2], s[s1 - 1], s[s1 - 0]); } break;
case 15:
{ parser.onAttribute(s[s1 - 3], s[s1 - 2], s[s1 - 0]); } break;
case 16:
{ parser.onToken(s[s1 - 0]); } break;
case 17:
{ parser.onToken(s[s1 - 0]); } break;
case 18:
{ parser.onToken(s[s1 - 0]); } break;
case 19:
{ parser.onToken(s[s1 - 0]); } break;
case 20:
{ parser.onToken(s[s1 - 0]); } break;
case 21:
{ parser.onToken(s[s1 - 0]); } break;
case 24:
{ parser.onModifiers(true); } break;
case 25:
{ parser.onModifiers(false); } break;
case 26:
{ parser.onQualifiedName(true, s[s1 - 0]); } break;
case 27:
{ parser.onQualifiedName(false, s[s1 - 0]); } break;
case 28:
{ error(s[s1 - 0]); } break;
case 29:
{ parser.startEnum(s[s1 - 0]); } break;
case 30:
{ parser.setEnumName(s[s1 - 0]); } break;
case 33:
{ parser.applyModifiers(); } break;
case 34:
{ error("EnumBody is missing"); } break;
case 36:
{ parser.startEnumBody(s[s1 - 0]); } break;
case 37:
{ parser.addEnumMember(s[s1 - 0]); } break;
case 43:
{ error("'}' expected after this token"); } break;
case 44:
{ parser.finishEnumBody(s[s1 - 0]); } break;
case 45:
{ parser.startClass(null, s[s1 - 0]); } break;
case 46:
{ parser.startClass(s[s1 - 1], s[s1 - 0]); } break;
case 47:
{ parser.setClassName(s[s1 - 0]); } break;
case 49:
{ parser.setClassBase(); } break;
case 54:
{ parser.applyModifiers(); } break;
case 55:
{ parser.finishClass(); } break;
case 56:
{ parser.finishClass(); } break;
case 57:
{ parser.startClassBody(s[s1 - 0]); } break;
case 60:
{ parser.finishClassBody(s[s1 - 0]); } break;
case 62:
{ parser.applyModifiers(); } break;
case 64:
{ parser.applyModifiers(); } break;
case 66:
{ parser.applyModifiers(); } break;
case 68:
{ parser.applyModifiers(); } break;
case 69:
{ parser.addClassMember(); } break;
case 72:
{ parser.onMissingSemicolon();} break;
case 73:
{ parser.onMissingSemicolon();} break;
case 74:
{ parser.onMissingSemicolon();} break;
case 75:
{ parser.onMissingSemicolon();} break;
case 76:
{ parser.onMissingSemicolon();} break;
case 81:
{ parser.startRecords(s[s1 - 0]); } break;
case 82:
{ parser.finishRecords(); } break;
case 83:
{ parser.startRecordsBody(s[s1 - 0]); } break;
case 86:
{ parser.finishRecordsBody(s[s1 - 0]); } break;
case 87:
{ parser.startRecord(s[s1 - 0]); } break;
case 88:
{ parser.setRecordValue(s[s1 - 0]); } break;
case 90:
{ parser.applyModifiers(); } break;
case 91:
{ parser.addRecord(); } break;
case 94:
{ parser.onVariableType(false); } break;
case 95:
{ parser.onVariableType(true); } break;
case 99:
{ error(s[s1 - 0]); } break;
case 100:
{ parser.onVariableDeclarator(s[s1 - 0]); } break;
case 101:
{ parser.onVariableDeclarator(s[s1 - 2], s[s1 - 0]); } break;
case 103:
{ parser.onVariableDeclaratorInit(s[s1 - 1]); } break;
case 104:
{ parser.onVariableInit(null); } break;
case 105:
{ parser.onVariableInit(s[s1 - 1]); } break;
case 106:
{ parser.onVariableInit(s[s1 - 1]); } break;
case 107:
{ parser.onVariableInit(s[s1 - 1]); } break;
case 108:
{ parser.onVariableInit(s[s1 - 1]); } break;
case 109:
{ parser.onVariableInit(s[s1 - 1]); } break;
case 110:
{ parser.onVariableInit(s[s1 - 1]); } break;
case 111:
{ parser.createMethod(s[s1 - 1]); } break;
case 112:
{ parser.createPriorityOperator(s[s1 - 1]); } break;
case 113:
{ parser.createCastOperator(s[s1 - 2], s[s1 - 1]); } break;
case 114:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 115:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 116:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 117:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 118:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 119:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 120:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 121:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 122:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 123:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 124:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 125:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 126:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 127:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 128:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 129:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 130:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 131:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 132:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 133:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 134:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 135:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 136:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 137:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 138:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 139:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 140:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 141:
{ parser.createOperator(s[s1 - 2], s[s1 - 1]); } break;
case 142:
{ parser.setMethodBody(); } break;
case 144:
{ parser.createParameter(); } break;
case 147:
{ parser.startParameters(s[s1 - 0]); } break;
case 148:
{ parser.finishParameters(s[s1 - 0]); } break;
case 149:
{ parser.finishParameters(s[s1 - 0]); } break;
case 153:
{ parser.startArrayInitializer(s[s1 - 0]); } break;
case 155:
{ parser.finishArrayInitializer(s[s1 - 0]); } break;
case 156:
{ parser.finishArrayInitializer(s[s1 - 0]); } break;
case 159:
{ parser.addArrayInitializer(); } break;
case 160:
{ parser.addArrayInitializer(); } break;
case 161:
{ parser.onMapElement(s[s1 - 4], s[s1 - 0]); } break;
case 162:
{ parser.startCompound(s[s1 - 0]); } break;
case 163:
{ parser.finishCompound(s[s1 - 0]); } break;
case 164:
{ parser.finishCompound(s[s1 - 0]); } break;
case 165:
{ parser.addStatement(); } break;
case 166:
{ parser.addStatement(); } break;
case 167:
{ parser.onDeclarator(); } break;
case 170:
{ parser.onStatement(); } break;
case 171:
{ parser.onStatement(); } break;
case 172:
{ parser.onStatement2(); } break;
case 173:
{ parser.onStatement2(); } break;
case 178:
{ parser.onStatement1(); } break;
case 179:
{ parser.onStatement1(); } break;
case 180:
{ parser.onStatement1(); } break;
case 181:
{ parser.onStatement1(); } break;
case 182:
{ parser.onStatement1(); } break;
case 183:
{ parser.onStatement1(); } break;
case 184:
{ parser.onStatement1(); } break;
case 185:
{ parser.onStatement1(); } break;
case 186:
{ parser.onStatement1(); } break;
case 187:
{ parser.onStatement1(); } break;
case 188:
{ parser.onStatement1(); } break;
case 189:
{ parser.onThrowStatement(s[s1 - 2]); } break;
case 190:
{ parser.onTryStatement(s[s1 - 1]); } break;
case 191:
{ parser.onCatchClause(s[s1 - 4]); } break;
case 192:
{ parser.onFinallyStatement(s[s1 - 1]); } break;
case 193:
{ parser.addCatchStatement(); } break;
case 194:
{ parser.addCatchStatement(); } break;
case 198:
{ parser.onIfStatement(s[s1 - 2], null); } break;
case 199:
{ parser.onIfStatement(s[s1 - 4], s[s1 - 1]); } break;
case 200:
{ parser.onWhileStatement(s[s1 - 2]); } break;
case 201:
{ parser.onDoWhileStatement(s[s1 - 4], s[s1 - 2]); } break;
case 202:
{ parser.onDeclarator(); } break;
case 204:
{ parser.onForStatement(s[s1 - 7], false); } break;
case 205:
{ parser.onForStatement(s[s1 - 8], true); } break;
case 209:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 210:
{ parser.onJumpStatement(s[s1 - 2], true); } break;
case 211:
{ parser.onJumpStatement(s[s1 - 2], true); } break;
case 212:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 213:
{ parser.onJumpStatement(s[s1 - 1], false); } break;
case 215:
{ parser.onAssignment(s[s1 - 1]); } break;
case 216:
{ parser.onAssignment(s[s1 - 1]); } break;
case 217:
{ parser.onOperator(s[s1 - 1]); } break;
case 218:
{ parser.onOperator(s[s1 - 1]); } break;
case 219:
{ parser.onOperator(s[s1 - 1]); } break;
case 220:
{ parser.onOperator(s[s1 - 1]); } break;
case 221:
{ parser.onOperator(s[s1 - 1]); } break;
case 222:
{ parser.onOperator(s[s1 - 1]); } break;
case 223:
{ parser.onOperator(s[s1 - 1]); } break;
case 224:
{ parser.onOperator(s[s1 - 1]); } break;
case 225:
{ parser.onOperator(s[s1 - 1]); } break;
case 228:
{ parser.onCondition(); } break;
case 230:
{ parser.onOperator(s[s1 - 1]); } break;
case 232:
{ parser.onOperator(s[s1 - 1]); } break;
case 234:
{ parser.onOperator(s[s1 - 1]); } break;
case 235:
{ parser.onOperator(s[s1 - 1]); } break;
case 237:
{ parser.onOperator(s[s1 - 1]); } break;
case 238:
{ parser.onOperator(s[s1 - 1]); } break;
case 239:
{ parser.onOperator(s[s1 - 1]); } break;
case 240:
{ parser.onOperator(s[s1 - 1]); } break;
case 241:
{ parser.onOperator(s[s1 - 1]); } break;
case 242:
{ parser.onOperator(s[s1 - 1]); } break;
case 243:
{ parser.onOperator(s[s1 - 1]); } break;
case 244:
{ parser.onOperator(s[s1 - 1]); } break;
case 246:
{ parser.onOperator(s[s1 - 1]); } break;
case 247:
{ parser.onOperator(s[s1 - 1]); } break;
case 249:
{ parser.onOperator(s[s1 - 1]); } break;
case 250:
{ parser.onOperator(s[s1 - 1]); } break;
case 251:
{ parser.onOperator(s[s1 - 1]); } break;
case 254:
{ parser.onUnary(s[s1 - 1]); } break;
case 255:
{ parser.onUnary(s[s1 - 1]); } break;
case 257:
{ parser.onTypeCast(); } break;
case 258:
{ parser.onArrayTypeCast(); } break;
case 259:
{ parser.onNewExpression(s[s1 - 1], s[s1 - 0]); } break;
case 260:
{ parser.onContainer(s[s1 - 0]); } break;
case 261:
{ parser.addContainer(s[s1 - 0]); } break;
case 262:
{ parser.onBracedExpression(s[s1 - 2], s[s1 - 0]); } break;
case 264:
{ parser.onThis(s[s1 - 0]); } break;
case 265:
{ parser.onSuper(s[s1 - 0]); } break;
case 266:
{ parser.onConstant(s[s1 - 0]); } break;
case 268:
{ parser.onTypeToPostfix(); } break;
case 269:
{ parser.onTypeToPostfix(); } break;
case 270:
{ parser.onMethodCall(false); } break;
case 271:
{ parser.onIndex(s[s1 - 1], s[s1 - 0], false); } break;
case 272:
{ parser.onIndex(s[s1 - 2], s[s1 - 0], true); } break;
case 273:
{ parser.onIndices(true); } break;
case 274:
{ parser.onIndices(false); } break;
case 277:
{ parser.onPostfix(); } break;
case 278:
{ parser.onMethodCall(true); } break;
case 279:
{ error(s[s1 - 0]); } break;
case 280:
{ parser.onArrayAccess(); } break;
case 281:
{ parser.onPostfix(); } break;
case 282:
{ parser.onMethodCall(true); } break;
case 283:
{ error(s[s1 - 0]); } break;
case 285:
{ parser.startExpressions(s[s1 - 0]); } break;
case 286:
{ parser.finishExpressions(s[s1 - 0]); } break;
case 287:
{ parser.finishExpressions(s[s1 - 0]); } break;
case 288:
{ parser.addExpression(); } break;
case 289:
{ parser.addExpression(); } break;
case 290:
{ parser.addExpression(); } break;
case 291:
{ parser.addExpression(); } break;
		}
		return endStack;
	}
}