buildscript {
	dependencies {
		classpath 'com.eriwen:gradle-css-plugin:2.14.0'
		classpath 'com.eriwen:gradle-js-plugin:2.14.1'
	}
}

apply plugin: 'js'
apply plugin: 'css'
apply plugin: 'maven'

configurations {
	webzipOut {
		canBeConsumed = true
		canBeResolved = false
	}
}

combineCss {
	source = file("${projectDir}/src/css/css.buildorder").readLines().findAll { !it.trim().isEmpty() }
			.collect { "${projectDir}/src/css/${it}" }
	dest = file("${buildDir}/web/debug/css/revolt.css")
}

minifyCss {
	source = combineCss
	dest = "${buildDir}/web/css/revolt.css"
}

task combineFontsCss(type: com.eriwen.gradle.css.tasks.CombineCssTask) {
	source = file("${projectDir}/src/css/fonts.buildorder").readLines().findAll { !it.trim().isEmpty() }
			.collect { "${projectDir}/src/css/${it}" }
	dest = file("${buildDir}/web/debug/css/fonts.css")
}

task minifyFontsCss(type: com.eriwen.gradle.css.tasks.MinifyCssTask) {
	source = combineFontsCss
	dest = "${buildDir}/web/css/fonts.css"
}

combineJs {
	source = file("${projectDir}/src/js/js.buildorder").readLines().findAll { !it.trim().isEmpty() }
			.collect { "${projectDir}/src/js/${it}" }
	dest = file("${buildDir}/web/debug/revolt.js")
}

minifyJs {
	source = combineJs
	dest = file("${buildDir}/web/revolt.js")
	closure {
		warningLevel = 'QUIET'
		compilerOptions = [
			languageIn: 'ECMASCRIPT6',
			languageOut: 'ECMASCRIPT5',
			rewritePolyfills: false
		]
	}
}

task combineUtilJs(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
	source = file("${projectDir}/src/js/util.buildorder").readLines().findAll { !it.trim().isEmpty() }
			.collect { "${projectDir}/src/js/${it}" }
	dest = file("${buildDir}/web/debug/revolt.utils.js")
}

task minifyUtilJs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
	source = combineUtilJs
	dest = file("${buildDir}/web/revolt.utils.js")
}

task assembleWebzip(type: Zip, group: 'web', dependsOn: [minifyCss, minifyFontsCss, minifyJs, minifyUtilJs]) {
	archiveName "${project.name}-web.jar"
	destinationDir file("${buildDir}/libs/")
	from("${buildDir}/web") {
		includeEmptyDirs = false
	}
	description "Assemble archive ${archiveName} into ${relativePath(destinationDir)}"
}

assemble.dependsOn assembleWebzip

artifacts {
	webzipOut assembleWebzip
}

publishing.publications {
	mavenWeb(MavenPublication) {
		artifact source: assembleWebzip, extension: 'jar', classifier: 'web'
	}
}
