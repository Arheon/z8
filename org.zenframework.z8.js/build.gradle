import org.gradle.api.Task
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.JavaExec
import org.gradle.api.tasks.OutputFile

apply plugin: 'base'
apply plugin: 'maven'

configurations.default.attributes {
	attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, project.objects.named(LibraryElements, 'web'))
}

configurations {
	jstools
}

dependencies {
	jstools 'org.zenframework.z8.dependencies.minimizers:closure:3.0'
	jstools 'org.zenframework.z8.dependencies.minimizers:yuicompressor:3.0'
}

class ConcatTask extends DefaultTask {

	private static final String ENCODING = 'UTF-8'

	@InputFile final RegularFileProperty source = project.objects.fileProperty()
	@OutputFile final RegularFileProperty output = project.objects.fileProperty()

	@TaskAction
	def run() {
		File buildorder = this.source.asFile.get()
		File source = buildorder.parentFile
		project.logger.info "Concat from ${source.path}..."

		def src = buildorder.readLines().findAll {
			def path = it.trim()
			!path.isEmpty() && !path.startsWith('#')
		}.collect {
			project.file("${source.path}/${it}")
		}
		src.each { project.logger.info "Concat: ${it}" }
		def dest = output.asFile.get()
		dest.parentFile.mkdirs()
		dest.newWriter(ENCODING).withWriter { w ->
			src.each { f -> w << f.getText(ConcatTask.ENCODING) << '\n' }
		}
	}

}

task concatCss(type: ConcatTask) {
	source = file("${projectDir}/src/css/.css.buildorder")
	output = file("${buildDir}/web/css/revolt.css")
}

task concatFontsCss(type: ConcatTask) {
	source = file("${projectDir}/src/css/.fonts.buildorder")
	output = file("${buildDir}/web/css/fonts.css")
}

task concatJs(type: ConcatTask) {
	source = file("${projectDir}/src/js/.js.buildorder")
	output = file("${buildDir}/web/revolt.js")
}

task concatUtilJs(type: ConcatTask) {
	source = file("${projectDir}/src/js/.util.buildorder")
	output = file("${buildDir}/web/revolt.util.js")
}

task prepareResources(type: Copy) {
	from('src') {
		include 'css/fonts/**', 'css/img/**'
	}
	into "${buildDir}/web"
}

task assembleZip(type: Zip, group: 'Build', dependsOn: [concatCss, concatFontsCss, concatJs, concatUtilJs, prepareResources]) {
	archiveName "${project.name}-${project.version}.zip"
	destinationDir file("${buildDir}/libs/")
	from("${buildDir}") {
		include 'web/**'
		includeEmptyDirs = false
	}
	description "Assemble archive ${archiveName} into ${relativePath(destinationDir)}"
}

assemble.dependsOn assembleZip

artifacts.add('default', assembleZip) {
	builtBy assembleZip
}

publishing.publications {
	maven(MavenPublication) {
		artifact source: assembleZip, extension: 'zip'
	}
}
